{"version":3,"file":"itsa.min.js","sources":["../src/helpers.ts","../src/any.ts","../src/anything.ts","../src/array.ts","../src/between.ts","../src/boolean.ts","../src/constructor.ts","../src/convert.ts","../src/date.ts","../src/default.ts","../src/email.ts","../src/equal.ts","../src/falsy.ts","../src/function.ts","../src/instanceof.ts","../src/integer.ts","../src/length.ts","../src/matches.ts","../src/max.ts","../src/min.ts","../src/not-empty.ts","../src/null.ts","../src/number.ts","../src/object.ts","../src/objectid.ts","../src/serialize.ts","../src/string.ts","../src/to.ts","../src/truthy.ts","../src/typeof.ts","../src/unique.ts","../src/validate.ts","../src/verify.ts","../src/itsa.ts"],"sourcesContent":["\nimport {itsa, Itsa} from \"./itsa\";\n\nexport declare type ItsaOrPrimative = Itsa | number | string | boolean | null | undefined | Function;\n\n\nexport function primitiveToItsa (val:ItsaOrPrimative):Itsa {\n  if (val instanceof Itsa) {\n    return val;\n  }else if (typeof val === 'function') {\n    return itsa.constructorIs(val);\n  }else {\n    return itsa.equal(val);\n  }\n}\n","import {ItsaValidateContext, Itsa, ItsaValidator} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\n\ninterface ItsaAnySettings {\n  schemas: Itsa[];\n}\n\nclass ItsaAny {\n  any (this:Itsa, ...options:(ItsaOrPrimative | ItsaOrPrimative[])[]):Itsa {\n    const schemas = options.flat().map(x => primitiveToItsa(x)) as Itsa[];\n    const settings:ItsaAnySettings = { schemas };\n    this.predicates.push({ id: 'any', settings });\n    return this as any as Itsa;\n  }\n}\n\nconst validate:ItsaValidator = {\n  id: 'any',\n  validate: (context:ItsaValidateContext, settings:ItsaAnySettings) => {\n    const { key, val, parent, validation, exists, result } = context;\n    const { schemas } = settings;\n\n    if (schemas.length === 0)\n      return;\n\n    for (const subSchema of schemas) {\n      const subResult = subSchema._validate({\n        key,\n        parent,\n        val,\n        exists,\n        settings: validation,\n        path: context.path,\n      });\n      if (subResult.ok) {\n        return;\n      }\n    }\n\n    result.addError(`No schemas matched.`);\n  }\n};\n\nItsa.extend(ItsaAny, validate);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaAny { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaAnything {\n  anything(this:Itsa):Itsa {\n    this.predicates.push({ id: 'anything', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaAnything, {\n  id: 'anything',\n  validate: (context:ItsaValidateContext) => {\n\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaAnything { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\n\ninterface ItsaArraySettings {\n  example?: Itsa;\n}\n\nexport class ItsaArray {\n  array(this:Itsa, example?:ItsaOrPrimative):Itsa {\n    const settings:ItsaArraySettings = { example: example ? primitiveToItsa(example) : null };\n    this.predicates.push({ id: 'array', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaArray, {\n  id: 'array',\n  validate: (context:ItsaValidateContext, settings:ItsaArraySettings) => {\n    const { val, validation, exists, result, type } = context;\n    const { example } = settings;\n\n    if (!Array.isArray(val)) return result.addError(`Expected array but found ${type}`);\n\n    if (!example) return;\n    if (!val.length) return;\n\n    for (let key=0; key < val.length; key++) {\n      const subVal = val[key];\n      const subResult = example._validate({\n        key,\n        parent: val,\n        val:subVal,\n        exists,\n        settings: validation,\n        path: [...context.path, key],\n      });\n      result.combine(subResult);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaArray { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport interface ItsaBetweenExtraSettings {\n  inclusive?:boolean;\n}\n\nexport interface ItsaBetweenSettings extends ItsaBetweenExtraSettings {\n  min:any;\n  max:any;\n  inclusive?:boolean;\n}\n\nexport class ItsaBetween {\n  between(this:Itsa, min:any, max:any, extraSettings:ItsaBetweenExtraSettings = {}):Itsa{\n    const settings = extraSettings as ItsaBetweenSettings;\n    settings.min = min;\n    settings.max = max;\n    this.predicates.push({ id: 'between', settings:settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaBetween, {\n  id: 'between',\n  validate: (context:ItsaValidateContext, settings:ItsaBetweenSettings) => {\n    const { val, result } = context;\n    const { min, max } = settings;\n    const inclusive = settings.inclusive ?? true;\n    const isTooLow = inclusive ? (val < min) : (val <= min);\n    if (isTooLow) result.addError(`Value cannot be under ${min}`);\n    const isTooHigh = inclusive ? (val > max) : (val >= max);\n    if (isTooHigh) result.addError(`Value cannot be above ${max}`);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaBetween { }\n}\n","\nimport { ItsaValidateContext } from \"./itsa\";\nimport { Itsa } from \"./itsa\";\n\nexport class ItsaBoolean {\n  boolean(this:Itsa):Itsa{\n    this.predicates.push({ id: 'boolean', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaBoolean, {\n  id: 'boolean',\n  validate: (context:ItsaValidateContext) => {\n    const { type, result } = context;\n    if (type !== 'boolean') result.addError(`Expected bool but found ${type}`);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaBoolean { }\n}\n","\nimport { ItsaValidateContext } from \"./itsa\";\nimport { Itsa } from \"./itsa\";\n\nexport interface ItsaConstructorSettings {\n  cls:Function;\n}\n\nexport class ItsaConstructor {\n  constructorIs(this:Itsa, cls:Function):Itsa{\n    const settings: ItsaConstructorSettings = { cls };\n    this.predicates.push({ id: 'constructor', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaConstructor, {\n  id: 'constructor',\n  validate: (context:ItsaValidateContext, settings: ItsaConstructorSettings) => {\n    const { val, result } = context;\n    const isMatch = val !== null && val !== undefined && val.constructor === settings.cls;\n    if (!isMatch) return result.addError(`Expected to be ${settings.cls}`);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaConstructor { }\n}\n","\nimport { Itsa, ItsaValidateContext } from \"./itsa\";\n\nexport interface ItsaConvertSettings {\n  converter:Function;\n}\n\nexport class ItsaConvert {\n  convert(this:Itsa, converter:Function):Itsa{\n    const settings: ItsaConvertSettings = { converter };\n    this.predicates.push({ id: 'convert', settings });\n    return this as any as Itsa;\n  }\n  to(this:Itsa, converter:Function):Itsa{\n    const settings: ItsaConvertSettings = { converter };\n    this.predicates.push({ id: 'convert', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaConvert, {\n  id: 'convert',\n  validate: (context:ItsaValidateContext, settings: ItsaConvertSettings) => {\n    const { val, setVal, result } = context;\n    const { converter } = settings;\n    if (typeof converter !== 'function') return;\n    try {\n      const newVal = converter(val);\n      setVal(newVal);\n    }catch(e){\n      result.addError(e);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaConvert { }\n}\n\n","\nimport { ItsaValidateContext } from \"./itsa\";\nimport { Itsa } from \"./itsa\";\n\nexport class ItsaDate {\n  date(this:Itsa):Itsa{\n    this.predicates.push({ id: 'date', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaDate, {\n  id: 'date',\n  validate: (context:ItsaValidateContext) => {\n    const { val, result } = context;\n    const type = Object.prototype.toString.call(val);\n    if (type !== \"[object Date]\") {\n      return result.addError(`Expected date but found ${type}`);\n    }\n    if (!isFinite(val)) {\n      result.addError(`Date is not valid`);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaDate { }\n}\n\n","\nimport { Itsa, ItsaValidateContext } from \"./itsa\";\n\nexport interface ItsaDefaultSettings {\n  val?:any;\n  falsy?: boolean;\n}\n\nexport class ItsaDefault {\n  default(this:Itsa, val, settings:ItsaDefaultSettings = {}):Itsa{\n    settings.val = val;\n    this.predicates.push({ id: 'default', settings });\n    return this as any as Itsa;\n  }\n  defaultNow(this:Itsa):Itsa{\n    this.predicates.push({ id: 'defaultNow', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(\n  ItsaDefault,\n  ...[\n    {\n      id: 'default',\n      validate: (context:ItsaValidateContext, settings:ItsaDefaultSettings) => {\n        const { val, setVal } = context;\n        const falsy = settings.falsy ?? false;\n        const doReplace = falsy ? !val : (val === null || val === undefined);\n        if (doReplace) {\n          setVal(settings.val);\n        }\n      }\n    },\n    {\n      id: 'defaultNow',\n      validate: (context:ItsaValidateContext) => {\n        const { val, setVal } = context;\n        if (val === null || val === undefined) {\n          setVal(new Date());\n        }\n      }\n    }\n  ]\n);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaDefault { }\n}\n\n","\nimport { Itsa, ItsaValidateContext } from \"./itsa\";\n\nconst rx = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\nexport class ItsaEmail {\n  email(this:Itsa):Itsa{\n    this.predicates.push({ id: 'email', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaEmail, {\n  id: 'email',\n  validate: (context:ItsaValidateContext) => {\n    const { val, type, result } = context;\n    if (type !== 'string') return result.addError(`Expected email but found ${type}`);\n    const isValid = rx.test(val);\n    if (!isValid) {\n      result.addError('Email address is invalid');\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaEmail { }\n}\n\n","\nimport { Itsa, ItsaValidateContext } from \"./itsa\";\n\nexport interface ItsaEqualSettings {\n  strict?:boolean;\n  example?:any;\n}\n\nexport class ItsaEqual {\n  equal(this:Itsa, val:any, settings:ItsaEqualSettings = {}):Itsa{\n    settings.example = val;\n    this.predicates.push({ id: 'equal', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaEqual, {\n  id: 'equal',\n  validate: (context:ItsaValidateContext, settings:ItsaEqualSettings) => {\n    const { val, result } = context;\n    const { example } = settings;\n    const strict = settings.strict ?? true;\n    const isEqual = strict ? (val === example) : (val == example);\n    if (!isEqual) {\n      result.addError(`Did not equal ${example}`);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaEqual { }\n}\n\n","\nimport { Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaFalsy {\n  falsy(this:Itsa):Itsa{\n    this.predicates.push({ id: 'falsy', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaFalsy, {\n  id: 'falsy',\n  validate: (context:ItsaValidateContext) => {\n    const { val, result } = context;\n    if (val) return result.addError(`Expected falsy value.`);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaFalsy { }\n}\n\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\n\ninterface ItsaFunctionSettings {\n  length?:Itsa;\n}\n\ninterface ItsaFunctionIncomingSettings {\n  length?:ItsaOrPrimative;\n}\n\nexport class ItsaFunction {\n  function(this:Itsa, settings:ItsaFunctionIncomingSettings = {}):Itsa{\n    if (settings.length) settings.length = primitiveToItsa(settings.length);\n    this.predicates.push({ id: 'function', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaFunction, {\n  id: 'function',\n  validate: (context:ItsaValidateContext, settings:ItsaFunctionSettings) => {\n    const { val, type, result } = context;\n    if (type !== 'function') return result.addError('Expected function');\n    if (settings.length) {\n      const subResult = settings.length._validate({\n        key: 'length',\n        parent: null,\n        val: val.length,\n        exists: true,\n        settings: context.validation,\n        path: context.path,\n      });\n      result.combine(subResult);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaFunction { }\n}\n\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaInstanceOfSettings {\n  cls: any;\n}\n\nexport class ItsaInstanceOf {\n  instanceof(this: Itsa, cls:any):Itsa {\n    const settings:ItsaInstanceOfSettings = { cls };\n    this.predicates.push({ id: 'instanceof', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaInstanceOf, {\n  id: 'instanceof',\n  validate: (context: ItsaValidateContext, settings:ItsaInstanceOfSettings) => {\n    const {val, result} = context;\n    const isInstance = val instanceof settings.cls;\n    if (!isInstance) {\n      result.addError(`Expected instance of ${settings.cls}`);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaInstanceOf { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaInteger {\n  integer(this:Itsa):Itsa {\n    this.predicates.push({ id: 'integer', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaInteger, {\n  id: 'integer',\n  validate: (context: ItsaValidateContext) => {\n    const {val, result} = context;\n    const valid = typeof val === \"number\"\n      && isNaN(val) === false\n      && [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY].indexOf(val) === -1\n      && val % 1 === 0;\n    if (!valid) {\n      result.addError('Invalid integer');\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaInteger { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaLengthSettings {\n  exactly?:number;\n  min?:number;\n  max?:number;\n}\n\nexport class ItsaLength {\n  length(this: Itsa, min?:number, max?:number):Itsa {\n    let settings:ItsaLengthSettings = {\n      min, max\n    };\n    if (typeof min === 'number' && typeof max !== 'number') {\n      settings = { exactly: min };\n    }\n    if (typeof min !== 'number') {\n      settings = { min: 1 };\n    }\n    this.predicates.push({ id: 'length', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaLength, {\n  id: 'length',\n  validate: (context: ItsaValidateContext, settings:ItsaLengthSettings) => {\n    const {val, result} = context;\n    const len = val ? val.length : null;\n    if (typeof len !== 'number') {\n      return result.addError('Invalid length');\n    }\n    if (typeof settings.exactly === 'number' && settings.exactly !== len) {\n      return result.addError(`Expected length to be ${settings.exactly}`);\n    }\n    if (typeof settings.min === 'number' && settings.min > len) {\n      return result.addError(`Expected length to be at least ${settings.min}`);\n    }\n    if (typeof settings.max === 'number' && settings.max < len) {\n      return result.addError(`Expected length to be at most ${settings.max}`);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaLength { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaMatchesSettings {\n  regex:RegExp;\n}\n\nexport class ItsaMatches {\n  matches(this: Itsa, regex:RegExp):Itsa {\n    const settings:ItsaMatchesSettings = { regex };\n    this.predicates.push({ id: 'matches', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaMatches, {\n  id: 'matches',\n  validate: (context: ItsaValidateContext, settings: ItsaMatchesSettings) => {\n    const {val, result} = context;\n    const valid = settings.regex.test(String(val));\n    if (!valid) {\n      result.addError(`Does not match ${settings.regex}`);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaMatches { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaMaxSettings {\n  max:any;\n  inclusive:boolean;\n}\n\nexport class ItsaMax {\n  max(this:Itsa, max:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? true;\n    const settings:ItsaMaxSettings = { max, inclusive };\n    this.predicates.push({ id: 'max', settings });\n    return this as any as Itsa;\n  }\n  under(this:Itsa, max:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? false;\n    const settings:ItsaMaxSettings = { max, inclusive };\n    this.predicates.push({ id: 'max', settings });\n    return this as any as Itsa;\n  }\n  below(this:Itsa, max:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? false;\n    const settings:ItsaMaxSettings = { max, inclusive };\n    this.predicates.push({ id: 'max', settings });\n    return this as any as Itsa;\n  }\n  atMost(this:Itsa, max:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? true;\n    const settings:ItsaMaxSettings = { max, inclusive };\n    this.predicates.push({ id: 'max', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaMax, {\n  id: 'max',\n  validate: (context: ItsaValidateContext, settings: ItsaMaxSettings) => {\n    const { val, result } = context;\n    const { max, inclusive } = settings;\n    if (inclusive) {\n      const ok = val <= max;\n      if (!ok) result.addError(`Value must be at most ${max}`);\n    } else {\n      const ok = val < max;\n      if (!ok) result.addError(`Value must be less than ${max}`);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaMax { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaMinSettings {\n  min:any;\n  inclusive:boolean;\n}\n\nexport class ItsaMin {\n  min(this: Itsa, min:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? true;\n    const settings:ItsaMinSettings = { min, inclusive };\n    this.predicates.push({ id: 'min', settings });\n    return this as any as Itsa;\n  }\n  over(this: Itsa, min:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? false;\n    const settings:ItsaMinSettings = { min, inclusive };\n    this.predicates.push({ id: 'min', settings });\n    return this as any as Itsa;\n  }\n  above(this: Itsa, min:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? false;\n    const settings:ItsaMinSettings = { min, inclusive };\n    this.predicates.push({ id: 'min', settings });\n    return this as any as Itsa;\n  }\n  atLeast(this: Itsa, min:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? true;\n    const settings:ItsaMinSettings = { min, inclusive };\n    this.predicates.push({ id: 'min', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaMin, {\n  id: 'min',\n  validate: (context: ItsaValidateContext, settings: ItsaMinSettings) => {\n    const { val, result } = context;\n    const { min, inclusive } = settings;\n    if (inclusive) {\n      const ok = val >= min;\n      if (!ok) result.addError(`Value must be at least ${min}`);\n    } else {\n      const ok = val > min;\n      if (!ok) result.addError(`Value must be greater than ${min}`);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaMin { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaNotEmpty {\n  notEmpty(this:Itsa):Itsa {\n    this.predicates.push({ id: 'notEmpty', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaNotEmpty, {\n  id: 'notEmpty',\n  validate: (context: ItsaValidateContext) => {\n    const { val, result } = context;\n    const len = val ? val.length : null;\n    if (typeof len === 'number' && len) {\n      return;\n    }\n\n    if (Object.prototype.toString.call(val) === \"[object Object]\") {\n      let hasFields = false;\n      for (const key in val) {\n        if (!val.hasOwnProperty(key)) { continue; }\n        hasFields = true;\n        break;\n      }\n      if (!hasFields) {\n        result.addError(`Object cannot be empty`);\n      }\n      return;\n    }\n\n    result.addError(`Value cannot be empty`);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaNotEmpty { }\n}\n","import {Itsa} from \"./itsa\";\nimport {ItsaEqualSettings} from \"./equal\";\n\nexport class ItsaNull {\n  null(this:Itsa):Itsa {\n    const settings:ItsaEqualSettings = { example: null, strict: true };\n    this.predicates.push({ id: 'equal', settings });\n    return this as any as Itsa;\n  }\n  undefined(this:Itsa):Itsa {\n    const settings:ItsaEqualSettings = { example: undefined, strict: true };\n    this.predicates.push({ id: 'equal', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaNull);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaNull { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaNumber {\n  number(this:Itsa):Itsa {\n    this.predicates.push({ id: 'number' });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaNumber, {\n  id: 'number',\n  validate: (context: ItsaValidateContext) => {\n    const {val, type, result} = context;\n    if (type !== 'number') return result.addError(`Expected number but type is ${type}.`);\n    if (isNaN(val)) return result.addError(`Expected number but found NaN.`);\n    if (!isFinite(val)) return result.addError(`Expected number but found infinity.`);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaNumber { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\n\ninterface ItsaObjectExample {\n  [key: string]:Itsa;\n}\n\ninterface ItsaObjectExampleWithPrimitives {\n  [key: string]:ItsaOrPrimative;\n}\n\ninterface ItsaObjectConfig {\n  extras?: boolean;\n  key?: Itsa;\n  value?: Itsa;\n}\n\ninterface ItsaObjectSettings {\n  example?: ItsaObjectExample;\n  config: ItsaObjectConfig;\n}\n\nexport class ItsaObject {\n  object(this:Itsa, example?:ItsaObjectExampleWithPrimitives, config:ItsaObjectConfig = {}):Itsa{\n    let convertedExample = null;\n    if (example) {\n      convertedExample = {};\n      for (const key in example) {\n        convertedExample[key] = primitiveToItsa(example[key]);\n      }\n    }\n    if (config.key) {\n      config.key = primitiveToItsa(config.key);\n    }\n    if (config.value) {\n      config.value = primitiveToItsa(config.value);\n    }\n    const settings:ItsaObjectSettings = { example:convertedExample as ItsaObjectExample, config };\n    this.predicates.push({ id: 'object', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaObject, {\n  id: 'object',\n  validate: (context:ItsaValidateContext, settings:ItsaObjectSettings) => {\n    const { val, parent, validation, result, type } = context;\n    const { example, config } = settings;\n    const extras = config.extras ?? false;\n\n    // Validate object\n    if (!val) return result.addError(`Expected object but value is ${val}.`);\n    if (type !== \"object\") return result.addError(`Expected object but type is ${type}.`);\n    if (val instanceof RegExp) return result.addError(`Expected object but type is regex.`);\n    if (val instanceof Date) return result.addError(`Expected object but type is date.`);\n    if (Array.isArray(val)) return result.addError(`Expected object but type is array.`);\n\n    const objectKeys = Object.keys(val);\n\n    if (example) {\n      // Validate according to example\n      const exampleKeys = Object.keys(example);\n      for (const key of exampleKeys) {\n        // For root object, we might skip missing fields\n        if (!parent && validation.partial && !objectKeys.includes(key)) {\n          continue;\n        }\n\n        const subSchema = example[key];\n        const subResult = subSchema._validate({\n          key,\n          parent:val,\n          val: val[key],\n          exists: key in val,\n          settings: validation,\n          path: [...context.path, key],\n        });\n        result.combine(subResult);\n      }\n\n      // Error for extra properties?\n      if (!extras) {\n        const extraKeys = objectKeys.filter(k => !exampleKeys.includes(k));\n        if (extraKeys.length) {\n          result.addError(`Extra unknown properties: ${extraKeys.join(', ')}`);\n        }\n      }\n    }\n\n    if (config.key) {\n      for (const key of objectKeys) {\n        const subResult = config.key._validate({\n          key,\n          parent: val,\n          val: key,\n          exists: true,\n          settings: validation,\n          path: [...context.path, key],\n        });\n        result.combine(subResult);\n      }\n    }\n\n    if (config.value) {\n      for (const key of objectKeys) {\n        const subVal = val[key];\n        const subResult = config.value._validate({\n          key,\n          parent: val,\n          val: subVal,\n          exists: true,\n          settings: validation,\n          path: [...context.path, key],\n        });\n        result.combine(subResult);\n      }\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaObject { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\nconst rxObjectId = /^[0-9a-f]{24}$/i;\n\nexport class ItsaObjectId {\n  objectid(this:Itsa):Itsa{\n    this.predicates.push({ id: 'objectid', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaObjectId, {\n  id: 'objectid',\n  validate: (context:ItsaValidateContext, settings?:any) => {\n    const { val, result, type } = context;\n    if (!val) return result.addError('ObjectId is required');\n    if (type !== 'string') return result.addError('ObjectId must be a string');\n    if (val.length !== 24) return result.addError('ObjectId must have 24 characters');\n    if (!rxObjectId.test(val)) return result.addError('ObjectId may only contain 0-9, a-z');\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaObjectId { }\n}\n","\nimport {Itsa, ItsaPredicate} from \"./itsa\";\n\ntype RawItsa = {predicates:ItsaPredicate[]};\n\nconst convert = (el:any) => {\n  const proto = Object.prototype.toString.call(el);\n  const isObject = `[object Object]` === proto;\n  const isArray = `[object Array]` === proto;\n  if (!isObject && !isArray) {\n    return el;\n  }\n\n  // replace sub-schemas: depth first\n  for (const key in el) {\n    el[key] = convert(el[key]);\n  }\n\n  if (isObject && el.predicates) {\n    const i = new Itsa();\n    i.predicates = el.predicates;\n    return i;\n  }\n\n  return el;\n}\n\nexport class ItsaSerialize {\n  load(this:Itsa, raw:RawItsa):Itsa{\n    this.predicates = convert(raw).predicates;\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaSerialize);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaSerialize { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaString {\n  string(this:Itsa):Itsa{\n    this.predicates.push({ id: 'string', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaString, {\n  id: 'string',\n  validate: (context:ItsaValidateContext) => {\n    const { type, result } = context;\n    if (type !== 'string') return result.addError(`Expected string`);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaString { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaToIntSettings {\n  radix?:number;\n}\n\nexport class ItsaTo {\n  toDate(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toDate', settings:null });\n    return this as any as Itsa;\n  }\n  toFloat(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toFloat', settings:null });\n    return this as any as Itsa;\n  }\n  toInt(this:Itsa, radix?:number):Itsa{\n    const settings:ItsaToIntSettings = { radix };\n    this.predicates.push({ id: 'toInt', settings });\n    return this as any as Itsa;\n  }\n  toLowerCase(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toLowerCase' });\n    return this as any as Itsa;\n  }\n  toUpperCase(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toUpperCase' });\n    return this as any as Itsa;\n  }\n  toNow(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toNow' });\n    return this as any as Itsa;\n  }\n  toString(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toString' });\n    return this as any as Itsa;\n  }\n  toTrimmed(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toTrimmed' });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(\n  ItsaTo,\n  {\n    id: 'toDate',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal, result } = context;\n      const date = new Date(val);\n      if (!isFinite(date.getTime())) return result.addError(`Date conversion failed`);\n      setVal(date);\n    }\n  },\n  {\n    id: 'toFloat',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal, result } = context;\n      const newFloat = parseFloat(val);\n      if (isNaN(newFloat)) return result.addError(`Float conversion failed`);\n      setVal(newFloat);\n    }\n  },\n  {\n    id: 'toInt',\n    validate: (context:ItsaValidateContext, settings:ItsaToIntSettings) => {\n      const { val, setVal, result } = context;\n      const { radix } = settings;\n      const newInt = parseInt(val, radix ?? 10);\n      if (isNaN(newInt)) return result.addError(`Int conversion failed`);\n      setVal(newInt);\n    }\n  },\n  {\n    id: 'toLowerCase',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal } = context;\n      setVal(String(val).toLowerCase());\n    }\n  },\n  {\n    id: 'toUpperCase',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal } = context;\n      setVal(String(val).toUpperCase());\n    }\n  },\n  {\n    id: 'toNow',\n    validate: (context:ItsaValidateContext) => {\n      const { setVal } = context;\n      setVal(new Date());\n    }\n  },\n  {\n    id: 'toString',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal } = context;\n      setVal(String(val));\n    }\n  },\n  {\n    id: 'toTrimmed',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal } = context;\n      setVal(String(val).trim());\n    }\n  },\n);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaTo { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaTruthy {\n  truthy(this:Itsa):Itsa{\n    this.predicates.push({ id: 'truthy', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaTruthy, {\n  id: 'truthy',\n  validate: (context:ItsaValidateContext) => {\n    const { val, result } = context;\n    if (!val) return result.addError(`Expected truthy value.`);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaTruthy { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaTypeOfSettings {\n  type: string;\n}\n\nexport class ItsaTypeOf {\n  typeof(this:Itsa, type:string):Itsa{\n    const settings: ItsaTypeOfSettings = { type };\n    this.predicates.push({ id: 'typeof', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaTypeOf, {\n  id: 'typeof',\n  validate: (context:ItsaValidateContext, settings: ItsaTypeOfSettings) => {\n    const { val, result } = context;\n    const { type } = settings;\n    const actualType = typeof val;\n    if (type !== actualType) {\n      result.addError(`Expected ${type}`);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaTypeOf { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaUniqueSettings {\n  getter?: Function;\n}\n\nexport class ItsaUnique {\n  unique(this:Itsa, getter?:Function):Itsa{\n    const settings: ItsaUniqueSettings = { getter };\n    this.predicates.push({ id: 'unique', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaUnique, {\n  id: 'unique',\n  validate: (context:ItsaValidateContext, settings: ItsaUniqueSettings) => {\n    const { val, result } = context;\n    const { getter } = settings;\n    const set = new Set();\n    for (const key in val) {\n      let subVal = val[key];\n      if (getter) subVal = getter(subVal);\n      if (set.has(subVal)) {\n        return result.addError(`${subVal} occurred multiple times`);\n      }\n      set.add(subVal);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaUnique { }\n}\n","\nimport {\n  Itsa,\n  ItsaValidator,\n  ItsaValidateContext,\n  ItsaInternalValidationSettings,\n  ItsaValidationException,\n  ItsaValidationResult,\n  ItsaValidationSettings,\n  ItsaValidationResultBuilder\n} from './itsa';\n\nclass ItsaValidation {\n  _validate(this:Itsa, settings:ItsaInternalValidationSettings):ItsaValidationResultBuilder {\n    const { key } = settings;\n    const result = new ItsaValidationResultBuilder(settings.settings.exhaustive, key, settings.path);\n    result.value = settings.val;\n    try {\n      const setVal = (newVal:any) => {\n        if (settings.parent) {\n          settings.parent[settings.key] = newVal;\n          settings.val = newVal;\n        }else{\n          result.value = newVal;\n        }\n      };\n      for (const predicate of this.predicates) {\n        const validator:ItsaValidator = Itsa.validators[predicate.id];\n\n        /* istanbul ignore next */\n        if (!validator) throw new Error(`Validator not found: ${predicate.id}`);\n\n        const context:ItsaValidateContext = {\n          setVal,\n          result,\n          val: settings.val,\n          key: settings.key,\n          parent: settings.parent,\n          exists: settings.exists,\n          type: typeof settings.val,\n          validation: settings.settings,\n          path: settings.path,\n        };\n        validator.validate(context, predicate.settings);\n        if (!result.ok) return result;\n      }\n    }catch (e){\n      /* istanbul ignore next */\n      if (e !== 'STOP_ON_FIRST_ERROR') throw e;\n    }\n    return result;\n  }\n\n  validate(this:Itsa, val: any, settings:ItsaValidationSettings = {}):ItsaValidationResult {\n    return this._validate({\n      val,\n      settings,\n      key:null,\n      parent:null,\n      exists: true,\n      path: [],\n    });\n  }\n\n  validOrThrow(this:Itsa, val:any, settings?:ItsaValidationSettings) {\n    const result = this.validate(val, settings);\n    if (!result.ok) {\n      throw new ItsaValidationException(result);\n    }\n  }\n}\n\nItsa.extend(ItsaValidation);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaValidation { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaVerifySettings {\n  verifier: Function;\n}\n\nexport class ItsaVerify {\n  verify(this:Itsa, verifier:Function):Itsa{\n    const settings: ItsaVerifySettings = { verifier };\n    this.predicates.push({ id: 'verify', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaVerify, {\n  id: 'verify',\n  validate: (context:ItsaValidateContext, settings: ItsaVerifySettings) => {\n    const { val, result } = context;\n    const { verifier } = settings;\n    try {\n      const response = verifier(val);\n      if (typeof response === 'boolean') {\n        if (response === false) {\n          result.addError(`Value is invalid`);\n        }\n        return;\n      }\n      if (typeof response === 'string') {\n        return result.addError(response);\n      }\n    }catch(e){\n      if (e === 'STOP_ON_FIRST_ERROR') throw e;\n      return result.addError(e);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaVerify { }\n}\n","\nexport interface ItsaInternalValidationSettings {\n  val:any;\n  key?:string|number;\n  path:(string|number)[];\n  parent?:object|[];\n  exists: boolean;\n  settings:ItsaValidationSettings;\n}\n\nexport interface ItsaValidationSettings {\n  partial?:boolean;\n  exhaustive?:boolean;\n}\n\nexport interface ItsaError {\n  message:string;\n  key:string | number;\n  path:(string | number)[];\n}\n\nexport class ItsaValidationException extends Error {\n  message: string;\n  result: ItsaValidationResult;\n\n  constructor(result:ItsaValidationResult) {\n    super();\n    this.message = `${result.errors[0].path.join('.')}: ${result.errors[0].message}`;\n    this.result = result;\n  }\n}\n\nexport interface ItsaValidationResult {\n  ok: boolean;\n  errors: ItsaError[];\n  value: any;\n  message?: string;\n}\n\nexport class ItsaValidationResultBuilder implements ItsaValidationResult {\n  ok = true;\n  errors = [];\n  value = undefined;\n  message? = undefined;\n\n  constructor(private exhaustive: boolean, private key: string | number, private path: (string | number)[]) {\n\n  }\n\n  addError (message:string) {\n    this.ok = false;\n    this.message = message;\n    this.errors.push({ message, key:this.key, path:this.path }); // path: null, val,\n    if (!this.exhaustive) {\n      throw 'STOP_ON_FIRST_ERROR';\n    }\n  }\n\n  combine(result: ItsaValidationResult):void{\n    this.ok = this.ok && result.ok;\n    for (const e of result.errors) {\n      this.errors.push(e);\n      if (!this.exhaustive) {\n        throw 'STOP_ON_FIRST_ERROR';\n      }\n    }\n  }\n}\n\nexport interface ItsaValidateContext {\n  parent?:object | [];\n  key?:string | number;\n  path:(string | number)[];\n  exists: boolean;\n  val:any;\n  type: string;\n  setVal:(val:any) => void;\n  validation: ItsaValidationSettings;\n  result: ItsaValidationResultBuilder;\n}\n\nexport interface ItsaPredicate {\n  id:string;\n  settings?:any;\n}\n\nexport interface ItsaValidator {\n  id:string;\n  validate:(ItsaValidateContext, any) => void;\n}\n\ntype ItsaSubclass = new (...args: any[]) => any;\n\nexport class Itsa {\n  predicates:ItsaPredicate[] = [];\n  static validators:{[key:string]:ItsaValidator} = {};\n\n  static extend(cls:ItsaSubclass, ...validators: ItsaValidator[]) {\n    for (const validator of validators) {\n      Itsa.validators[validator.id] = validator;\n    }\n\n    const keys = Object.getOwnPropertyNames(cls.prototype).filter(m => m !== 'constructor');\n    for (const key of keys) {\n      const val = cls.prototype[key];\n      Itsa.prototype[key] = val;\n\n      /* istanbul ignore next */\n      if (typeof val === 'function') {\n        itsa[key] = (...args) => {\n          const it = new Itsa();\n          return it[key](...args);\n        };\n      }\n    }\n  }\n}\n\nexport const itsa:Itsa = { predicates: [] } as Itsa;\n\nimport './any';\nimport './anything';\nimport './array';\nimport './between';\nimport './boolean';\nimport './constructor';\nimport './convert';\nimport './date';\nimport './default';\nimport './email';\nimport './equal';\nimport './falsy';\nimport './function';\nimport './instanceof';\nimport './integer';\nimport './length';\nimport './matches';\nimport './max';\nimport './min';\nimport './not-empty';\nimport './null';\nimport './number';\nimport './object';\nimport './objectid';\nimport './serialize';\nimport './string';\nimport './to';\nimport './truthy';\nimport './typeof';\nimport './unique';\nimport './validate';\nimport './verify';\n"],"names":["primitiveToItsa","val","Itsa","itsa","constructorIs","equal","extend","[object Object]","options","settings","schemas","flat","map","x","this","predicates","push","id","validate","context","key","parent","validation","exists","result","length","subSchema","_validate","path","ok","addError","example","type","Array","isArray","subVal","subResult","combine","min","max","extraSettings","inclusive","cls","constructor","converter","setVal","e","Object","prototype","toString","call","isFinite","falsy","Date","rx","test","strict","isNaN","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","indexOf","exactly","len","regex","String","hasFields","hasOwnProperty","undefined","config","convertedExample","value","extras","RegExp","objectKeys","keys","exampleKeys","partial","includes","extraKeys","filter","k","join","rxObjectId","convert","el","proto","isObject","i","raw","radix","date","getTime","newFloat","parseFloat","newInt","parseInt","toLowerCase","toUpperCase","trim","getter","set","Set","has","add","ItsaValidationResultBuilder","exhaustive","newVal","predicate","validator","validators","Error","ItsaValidationException","verifier","response","super","message","errors","getOwnPropertyNames","m","args"],"mappings":"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"}