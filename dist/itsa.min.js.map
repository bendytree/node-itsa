{"version":3,"sources":["webpack://ItsaLib/webpack/universalModuleDefinition","webpack://ItsaLib/./src/all.ts","webpack://ItsaLib/./src/and.ts","webpack://ItsaLib/./src/any.ts","webpack://ItsaLib/./src/anything.ts","webpack://ItsaLib/./src/array.ts","webpack://ItsaLib/./src/between.ts","webpack://ItsaLib/./src/boolean.ts","webpack://ItsaLib/./src/build.ts","webpack://ItsaLib/./src/clone.ts","webpack://ItsaLib/./src/constructor.ts","webpack://ItsaLib/./src/convert.ts","webpack://ItsaLib/./src/date.ts","webpack://ItsaLib/./src/decorators.ts","webpack://ItsaLib/./src/default.ts","webpack://ItsaLib/./src/email.ts","webpack://ItsaLib/./src/equal.ts","webpack://ItsaLib/./src/extend.ts","webpack://ItsaLib/./src/falsy.ts","webpack://ItsaLib/./src/function.ts","webpack://ItsaLib/./src/get.ts","webpack://ItsaLib/./src/helpers.ts","webpack://ItsaLib/./src/instanceof.ts","webpack://ItsaLib/./src/integer.ts","webpack://ItsaLib/./src/itsa.ts","webpack://ItsaLib/./src/keep.ts","webpack://ItsaLib/./src/length.ts","webpack://ItsaLib/./src/matches.ts","webpack://ItsaLib/./src/max.ts","webpack://ItsaLib/./src/message.ts","webpack://ItsaLib/./src/min.ts","webpack://ItsaLib/./src/not-empty.ts","webpack://ItsaLib/./src/null.ts","webpack://ItsaLib/./src/number.ts","webpack://ItsaLib/./src/object.ts","webpack://ItsaLib/./src/objectid.ts","webpack://ItsaLib/./src/openapi.ts","webpack://ItsaLib/./src/optional.ts","webpack://ItsaLib/./src/partialed.ts","webpack://ItsaLib/./src/serialize.ts","webpack://ItsaLib/./src/string.ts","webpack://ItsaLib/./src/to.ts","webpack://ItsaLib/./src/touch.ts","webpack://ItsaLib/./src/truthy.ts","webpack://ItsaLib/./src/typeof.ts","webpack://ItsaLib/./src/unique.ts","webpack://ItsaLib/./src/validate.ts","webpack://ItsaLib/./src/verify.ts","webpack://ItsaLib/webpack/bootstrap","webpack://ItsaLib/webpack/startup"],"names":["root","factory","exports","module","define","amd","this","ItsaAll","options","schemas","flat","map","x","primitiveToItsa","schema","predicates","p","push","Itsa","extend","ItsaAnd","ItsaAny","settings","id","validate","context","key","val","parent","validation","exists","result","length","truthyErrors","subSchema","isSchemaTruthy","find","includes","subResult","_validate","path","ok","message","registerError","ItsaAnything","ItsaArray","example","builder","type","Array","isArray","subVal","registerResult","ItsaBetween","min","max","extraSettings","inclusive","ItsaBoolean","ItsaBuild","overrides","obj","predicate","validator","validators","Object","assign","deepClone","clone","v","it","_isOptional","Date","getTime","RegExp","clonedObj","keys","ItsaClone","ItsaConstructor","cls","constructor","ItsaConvert","converter","setVal","e","ItsaDate","prototype","toString","call","isFinite","itsaField","undefined","Error","target","getOwnPropertyDescriptor","parentSchema","itsa","object","addProperty","build","source","config","extras","filter","forEach","combineSchemas","ItsaDefault","falsy","rx","ItsaEmail","test","ItsaEqual","strict","ItsaExtend","extendor","ItsaFalsy","ItsaFunction","ItsaGet","ex","and","constructorIs","equal","ItsaInstanceOf","ItsaInteger","isNaN","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","indexOf","ItsaValidationException","errors","join","ItsaValidationResult","error","err","ItsaValidationResultBuilder","exhaustive","hint","value","pathStr","messageFormat","msgDataSegments","replace","split","JSON","stringify","addError","addResult","getOwnPropertyNames","m","fields","parsedFields","f","rest","keysToDelete","exampleForKey","matchingFields","pf","field","partial","ItsaKeep","ItsaLength","exactly","len","ItsaMatches","regex","String","ItsaMax","msg","_message","ItsaMin","ItsaNotEmpty","hasFields","hasOwnProperty","ItsaNull","ItsaNumber","ItsaObject","convertedExample","i","pred","schemaForKey","objectKeys","exampleKeys","isMissing","extraKeys","k","rxObjectId","ItsaObjectId","ItsaOpenApiSchema","params","isRoot","lookup","properties","required","keySchema","get","isRequired","toOpenApiSchema","items","s","format","match","pattern","minLength","maxLength","getOpenApiTypeForValue","const","anyPredicateSchemas","subSchemas","allSame","ss","allConst","enum","oneOf","minimum","maximum","exclusiveMinimum","exclusiveMaximum","_defaults","$ref","toRef","ItsaOptional","forEachValue","handler","partialize","restOfKeys","ItsaPartialed","convert","el","proto","isObject","ItsaSerialize","raw","toJSON","ItsaString","ItsaTo","radix","date","newFloat","parseFloat","newInt","parseInt","toLowerCase","toUpperCase","trim","ItsaTouch","toucher","objectPredicates","touched","touch","ItsaTruthy","ItsaTypeOf","ItsaUnique","getter","set","Set","has","add","ItsaValidation","t","newVal","withMessageFormat","okOrThrow","ItsaVerify","verifier","response","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"mappings":";;;;;;CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAiB,QAAID,IAErBD,EAAc,QAAIC,IARpB,CASGK,MAAM,WACT,M,kxCCVA,aACA,QAEMC,E,wKACJ,WAAkE,2BAA/CC,EAA+C,yBAA/CA,EAA+C,gBAChE,IADgE,EAC1DC,EAAUD,EAAQE,OAAOC,KAAI,SAAAC,GAAC,OAAI,EAAAC,gBAAgBD,MADQ,IAE3CH,GAF2C,IAEhE,2BAA8B,OAAnBK,EAAmB,YACZA,EAAOC,YADK,IAC5B,2BAAmC,KAAxBC,EAAwB,QACjCV,KAAKS,WAAWE,KAAKD,IAFK,gCAFkC,8BAOhE,OAAOV,U,gCAIX,EAAAY,KAAKC,OAAOZ,I,0wCCfZ,aACA,QAEaa,E,wKACX,WAAkE,2BAA/CZ,EAA+C,yBAA/CA,EAA+C,gBAChE,IADgE,EAC1DC,EAAUD,EAAQE,OAAOC,KAAI,SAAAC,GAAC,OAAI,EAAAC,gBAAgBD,MADQ,IAE3CH,GAF2C,IAEhE,2BAA8B,OAAnBK,EAAmB,YACZA,EAAOC,YADK,IAC5B,2BAAmC,KAAxBC,EAAwB,QACjCV,KAAKS,WAAWE,KAAKD,IAFK,gCAFkC,8BAOhE,OAAOV,U,gCARX,YAYA,EAAAY,KAAKC,OAAOC,I,yvCCfZ,aACA,QAMMC,E,wKACJ,WAAkE,2BAA/Cb,EAA+C,yBAA/CA,EAA+C,gBAChE,IAAMC,EAAUD,EAAQE,OAAOC,KAAI,SAAAC,GAAC,OAAI,EAAAC,gBAAgBD,MAClDU,EAA2B,CAAEb,WAEnC,OADAH,KAAKS,WAAWE,KAAK,CAAEM,GAAI,MAAOD,aAC3BhB,U,gCAILkB,EAAyB,CAC7BD,GAAI,MACJC,SAAU,SAACC,EAA6BH,GACtC,IAAQI,EAAiDD,EAAjDC,IAAKC,EAA4CF,EAA5CE,IAAKC,EAAuCH,EAAvCG,OAAQC,EAA+BJ,EAA/BI,WAAYC,EAAmBL,EAAnBK,OAAQC,EAAWN,EAAXM,OACtCtB,EAAYa,EAAZb,QAER,GAAuB,IAAnBA,EAAQuB,OAAZ,CAGA,IAPkE,EAO5DC,EAAe,GAP6C,IAQ1CxB,GAR0C,IAQlE,2BAAiC,KAAtByB,EAAsB,QACzBC,EAAiBD,EAAUnB,WAAWqB,MAAK,SAAApB,GAAC,OAAK,CAAC,QAAS,SAASqB,SAASrB,EAAEO,OAE/Ee,EAAYJ,EAAUK,UAAU,CACpCb,MACAE,SACAD,MACAG,SACAR,SAAUO,EACVW,KAAMf,EAAQe,OAEhB,GAAIF,EAAUG,GACZ,OACQN,GACRF,EAAahB,KAAKqB,EAAUI,UAtBkC,8BA0BtC,IAAxBT,EAAaD,OACfD,EAAOY,cAAcV,EAAa,GAAIN,GAEtCI,EAAOY,cAAP,sBAA4ChB,MAKlD,EAAAT,KAAKC,OAAOE,EAASG,I,2PCpDrB,aAEaoB,E,6KACX,WAEE,OADAtC,KAAKS,WAAWE,KAAK,CAAEM,GAAI,WAAYD,SAAS,OACzChB,U,gCAHX,iBAOA,EAAAY,KAAKC,OAAOyB,EAAc,CACxBrB,GAAI,WACJC,SAAU,SAACC,Q,q/BCXb,aACA,QAMaoB,E,0KACX,SAAiBC,GACf,IAAMxB,EAA6B,CAAEwB,QAASA,EAAU,EAAAjC,gBAAgBiC,GAAW,MAEnF,OADAxC,KAAKS,WAAWE,KAAK,CAAEM,GAAI,QAASD,aAC7BhB,U,gCAJX,cAQA,EAAAY,KAAKC,OAAO0B,EAAW,CACrBtB,GAAI,QACJwB,QAFqB,SAEbzB,GACN,MAAO,IAETE,SAAU,SAACC,EAA6BH,GACtC,IAAQK,EAA0CF,EAA1CE,IAAKE,EAAqCJ,EAArCI,WAAYC,EAAyBL,EAAzBK,OAAQC,EAAiBN,EAAjBM,OAAQiB,EAASvB,EAATuB,KACjCF,EAAYxB,EAAZwB,QAER,IAAKG,MAAMC,QAAQvB,GAAM,OAAOI,EAAOY,cAAP,mCAAiDK,GAAQrB,GAEzF,GAAKmB,GACAnB,EAAIK,OAET,IAAK,IAAIN,EAAI,EAAGA,EAAMC,EAAIK,OAAQN,IAAO,CACvC,IAAMyB,EAASxB,EAAID,GACbY,EAAYQ,EAAQP,UAAU,CAClCb,MACAE,OAAQD,EACRA,IAAIwB,EACJrB,SACAR,SAAUO,EACVW,KAAM,GAAF,SAAMf,EAAQe,MAAd,CAAoBd,MAE1BK,EAAOqB,eAAed,Q,0PCtC5B,aAYae,E,4KACX,SAAmBC,EAASC,GAAoD,IAA3CC,EAA2C,uDAAF,GACtElC,EAAWkC,EAIjB,OAHAlC,EAASgC,IAAMA,EACfhC,EAASiC,IAAMA,EACfjD,KAAKS,WAAWE,KAAK,CAAEM,GAAI,UAAWD,SAASA,IACxChB,U,gCANX,gBAUA,EAAAY,KAAKC,OAAOkC,EAAa,CACvB9B,GAAI,UACJC,SAAU,SAACC,EAA6BH,GAAgC,MAC9DK,EAAgBF,EAAhBE,IAAKI,EAAWN,EAAXM,OACLuB,EAAahC,EAAbgC,IAAKC,EAAQjC,EAARiC,IACPE,EAAS,UAAGnC,EAASmC,iBAAZ,UACEA,EAAa9B,EAAM2B,EAAQ3B,GAAO2B,IACrCvB,EAAOY,cAAP,gCAA8CW,GAAO3B,IACjD8B,EAAa9B,EAAM4B,EAAQ5B,GAAO4B,IACrCxB,EAAOY,cAAP,gCAA8CY,GAAO5B,O,0PC9BxE,aAEa+B,E,4KACX,WAEE,OADApD,KAAKS,WAAWE,KAAK,CAAEM,GAAI,UAAWD,SAAS,OACxChB,U,gCAHX,gBAOA,EAAAY,KAAKC,OAAOuC,EAAa,CACvBnC,GAAI,UACJC,SAAU,SAACC,GACT,IAAQuB,EAAsBvB,EAAtBuB,KAAMjB,EAAgBN,EAAhBM,OAAQJ,EAAQF,EAARE,IACT,YAATqB,GAAoBjB,EAAOY,cAAP,kCAAgDK,GAAQrB,O,89CCdpF,a,IASMgC,E,0KACJ,SAAoBC,GAClB,IAAMC,EATV,SAAkB/C,GAAW,UACHA,EAAOC,YADJ,IAC3B,2BAA2C,KAAhC+C,EAAgC,QACnCC,EAA2B,EAAA7C,KAAK8C,WAAWF,EAAUvC,IAC3D,GAAIwC,EAAUhB,QAAS,OAAOgB,EAAUhB,QAAQe,EAAUxC,WAHjC,+BASb,CAAShB,MAIrB,OAHIuD,GAAsB,WAAf,EAAOA,IAAoBD,GAAkC,WAArB,EAAOA,IACxDK,OAAOC,OAAOL,EAAKD,GAEdC,O,gCAIX,EAAA3C,KAAKC,OAAOwC,I,yeCnBZ,aAEa,EAAAQ,UAAY,SAAmBN,GAwB1C,OAtBA,SAASO,EAAMzC,GACb,IAAMqB,EAAO,EAAOrB,GAEpB,GAAY,OAARA,GAAyB,WAATqB,EAAmB,OAAOrB,EAE9C,GAAIsB,MAAMC,QAAQvB,GAAM,OAAOA,EAAIhB,KAAI,SAAA0D,GAAC,OAAID,EAAMC,MAClD,GAAI1C,aAAe,EAAAT,KAAM,CACvB,IAAMoD,EAAK,IAAI,EAAApD,KAGf,OAFAoD,EAAGC,YAAc5C,EAAI4C,YACrBD,EAAGvD,WAAaqD,EAAMzC,EAAIZ,YACnBuD,EAET,GAAI3C,aAAe6C,KAAM,OAAO,IAAIA,KAAK7C,EAAI8C,WAC7C,GAAI9C,aAAe+C,OAAQ,OAAO,IAAIA,OAAO/C,GAG7C,IADA,IAAMgD,EAAY,GAClB,MAAkBV,OAAOW,KAAKjD,GAA9B,eAAoC,CAA/B,IAAMD,EAAG,KACZiD,EAAUjD,GAAO0C,EAAMzC,EAAID,IAE7B,OAAOiD,EAGFP,CAAMP,I,IAGFgB,E,0KACX,WACE,OAAO,EAAAV,UAAU7D,W,gCAFrB,cAMA,EAAAY,KAAKC,OAAO0D,I,8PClCZ,aAMaC,E,kLACX,SAAyBC,GACvB,IAAMzD,EAAoC,CAAEyD,OAE5C,OADAzE,KAAKS,WAAWE,KAAK,CAAEM,GAAI,cAAeD,aACnChB,U,gCAJX,oBAQA,EAAAY,KAAKC,OAAO2D,EAAiB,CAC3BvD,GAAI,cACJC,SAAU,SAACC,EAA6BH,GACtC,IAAQK,EAAgBF,EAAhBE,IAAKI,EAAWN,EAAXM,OAEb,KADgBJ,SAAqCA,EAAIqD,cAAgB1D,EAASyD,KACpE,OAAOhD,EAAOY,cAAP,yBAAuCrB,EAASyD,KAAOpD,O,0PCpBhF,aAMasD,E,4KACX,SAAmBC,GACjB,IAAM5D,EAAgC,CAAE4D,aAExC,OADA5E,KAAKS,WAAWE,KAAK,CAAEM,GAAI,UAAWD,aAC/BhB,O,gBAET,SAAc4E,GACZ,IAAM5D,EAAgC,CAAE4D,aAExC,OADA5E,KAAKS,WAAWE,KAAK,CAAEM,GAAI,UAAWD,aAC/BhB,U,gCATX,gBAaA,EAAAY,KAAKC,OAAO8D,EAAa,CACvB1D,GAAI,UACJC,SAAU,SAACC,EAA6BH,GACtC,IAAQK,EAAwBF,EAAxBE,IAAKwD,EAAmB1D,EAAnB0D,OAAQpD,EAAWN,EAAXM,OACbmD,EAAc5D,EAAd4D,UACR,GAAyB,mBAAdA,EACX,IAEEC,EADeD,EAAUvD,IAE1B,MAAMyD,GACLrD,EAAOY,cAAcyC,EAAGzD,Q,uPC5B9B,aAEa0D,E,yKACX,WAEE,OADA/E,KAAKS,WAAWE,KAAK,CAAEM,GAAI,OAAQD,SAAS,OACrChB,U,gCAHX,aAOA,EAAAY,KAAKC,OAAOkE,EAAU,CACpB9D,GAAI,OACJC,SAAU,SAACC,GACT,IAAQE,EAAgBF,EAAhBE,IAAKI,EAAWN,EAAXM,OACPiB,EAAOiB,OAAOqB,UAAUC,SAASC,KAAK7D,GAC5C,GAAa,kBAATqB,EACF,OAAOjB,EAAOY,cAAP,kCAAgDK,GAAQrB,GAE5D8D,SAAS9D,IACZI,EAAOY,cAAP,oBAA0ChB,O,goCCnBhD,aAiDA,SAAgB+D,EAAW5E,GACzB,QAAe6E,IAAX7E,EAAsB,MAAM,IAAI8E,MAAJ,gDAChC,OAAO,SAAUC,EAAanE,GAC5B,IAAMqD,EAAMc,EAAOb,YACnB,IAAKf,OAAO6B,yBAAyBf,EAAK,UAAW,CACnD,IAAMgB,EAAehB,EAAIjE,OACzBiE,EAAIjE,OAASiF,EAAeA,EAAa3B,QAAU,EAAA4B,KAAKC,OAAO,IAEjElB,EAAIjE,OAAOoF,YAAYxE,EAAKZ,IAjChC,aAEE,WAAY8C,GAEV,O,4FAFoB,SACJtD,KAAa0E,YAAYlE,OAC3BqF,MAAMvC,IAIxB,sBAA4B9C,GAC1B,OAAO,SAAU+E,EAAanE,GAC5B,GAAIA,EACF,OAAOgE,EAAU5E,EAAV4E,CAAkBG,EAAQnE,GAE/BmE,EAAO/E,QAAUA,EAlCF,SAAC+E,EAAaO,GAAe,UAClCA,EAAOrF,YAD2B,IAClD,2BAAmC,KAAxBC,EAAwB,QACjC,GAAa,WAATA,EAAEO,GAAiB,CACrB,IAAMD,EAAWN,EAAEM,SACnB,GAAIA,EAASwB,QACX,cAAkBmB,OAAOW,KAAKtD,EAASwB,SAAvC,eAAiD,CAA5C,IAAMpB,EAAG,KACZmE,EAAOK,YAAYxE,EAAKJ,EAASwB,QAAQpB,UAI7CmE,EAAO9E,WAAWE,KAAKD,IAVuB,8BAe5BoF,EAAOrF,WAAWqB,MAAK,SAAApB,GAAC,cAAa,WAATA,EAAEO,KAAkD,KAA/B,UAAAP,EAAEM,gBAAF,mBAAY+E,cAAZ,eAAoBC,YAEzFT,EAAO9E,WAAWwF,QAAO,SAAAvF,GAAC,MAAa,WAATA,EAAEO,MAAiBiF,SAAQ,SAAAxF,GAAC,OAAIA,EAAEM,SAAS+E,OAAOC,QAAS,KAkBvFG,CAAeZ,EAAO/E,OAAQA,GACtBA,EACR+E,EAAO/E,OAASA,EACR+E,EAAO/E,SAGf+E,EAAO/E,OAAS,EAAAkF,KAAKC,OAAO,OAKlC,e,gQCjDA,aAOaS,E,4KACX,SAAmB/E,GAAsC,IAAjCL,EAAiC,uDAAF,GAGrD,OAFAA,EAASK,IAAMA,EACfrB,KAAKS,WAAWE,KAAK,CAAEM,GAAI,UAAWD,aAC/BhB,O,wBAET,WAEE,OADAA,KAAKS,WAAWE,KAAK,CAAEM,GAAI,aAAcD,SAAS,OAC3ChB,U,gCARX,iBAYA,IAAAY,MAAKC,OAAL,SACEuF,GADF,OAEK,CACD,CACEnF,GAAI,UACJwB,QAFF,SAEUzB,GACN,OAAOA,EAASK,KAElBH,SAAU,SAACC,EAA6BH,GAAgC,MAC9DK,EAAgBF,EAAhBE,IAAKwD,EAAW1D,EAAX0D,QACF,UAAG7D,EAASqF,aAAZ,UACgBhF,EAAOA,UAEhCwD,EAAO7D,EAASK,OAItB,CACEJ,GAAI,aACJwB,QAFF,SAEUzB,GACN,OAAO,IAAIkD,MAEbhD,SAAU,SAACC,GACT,IAAQE,EAAgBF,EAAhBE,IAAKwD,EAAW1D,EAAX0D,OACTxD,SACFwD,EAAO,IAAIX,Y,wPC5CrB,aAEMoC,EAAK,6BAEEC,E,0KACX,WAEE,OADAvG,KAAKS,WAAWE,KAAK,CAAEM,GAAI,QAASD,SAAS,OACtChB,U,gCAHX,cAOA,EAAAY,KAAKC,OAAO0F,EAAW,CACrBtF,GAAI,QACJC,SAAU,SAACC,GACT,IAAQE,EAAsBF,EAAtBE,IAAKqB,EAAiBvB,EAAjBuB,KAAMjB,EAAWN,EAAXM,OACnB,GAAa,WAATiB,EAAmB,OAAOjB,EAAOY,cAAP,mCAAiDK,GAAQrB,GACvEiF,EAAGE,KAAKnF,IAEtBI,EAAOY,cAAc,2BAA4BhB,O,wPClBvD,aAOaoF,E,0KACX,SAAiBpF,GAAwC,IAA/BL,EAA+B,uDAAF,GAGrD,OAFAA,EAASwB,QAAUnB,EACnBrB,KAAKS,WAAWE,KAAK,CAAEM,GAAI,QAASD,aAC7BhB,U,gCAJX,cAQA,EAAAY,KAAKC,OAAO4F,EAAW,CACrBxF,GAAI,QACJC,SAAU,SAACC,EAA6BH,GAA8B,MAC5DK,EAAgBF,EAAhBE,IAAKI,EAAWN,EAAXM,OACLe,EAAYxB,EAAZwB,SACI,UAAGxB,EAAS0F,cAAZ,SACcrF,IAAQmB,EAAYnB,GAAOmB,IAEnDf,EAAOY,cAAP,wBAAsCG,GAAWnB,O,yPCvBvD,aAEasF,E,2KACX,SAAkBC,GAEhB,OADAA,EAAS5G,MACFA,U,gCAHX,eAWA,EAAAY,KAAKC,OAAO8F,I,wPCbZ,aAEaE,E,0KACX,WAEE,OADA7G,KAAKS,WAAWE,KAAK,CAAEM,GAAI,QAASD,SAAS,OACtChB,U,gCAHX,cAOA,EAAAY,KAAKC,OAAOgG,EAAW,CACrB5F,GAAI,QACJC,SAAU,SAACC,GACT,IAAQE,EAAgBF,EAAhBE,IAAKI,EAAWN,EAAXM,OACb,GAAIJ,EAAK,OAAOI,EAAOY,cAAP,wBAA8ChB,O,2PCblE,aACA,QAUayF,E,6KACX,WAA8D,IAA1C9F,EAA0C,uDAAF,GAG1D,OAFIA,EAASU,SAAQV,EAASU,OAAS,EAAAnB,gBAAgBS,EAASU,SAChE1B,KAAKS,WAAWE,KAAK,CAAEM,GAAI,WAAYD,aAChChB,U,gCAJX,iBAQA,EAAAY,KAAKC,OAAOiG,EAAc,CACxB7F,GAAI,WACJC,SAAU,SAACC,EAA6BH,GACtC,IAAQK,EAAsBF,EAAtBE,IAAKqB,EAAiBvB,EAAjBuB,KAAMjB,EAAWN,EAAXM,OACnB,GAAa,aAATiB,EAAqB,OAAOjB,EAAOY,cAAc,oBAAqBhB,GAC1E,GAAIL,EAASU,OAAQ,CACnB,IAAMM,EAAYhB,EAASU,OAAOO,UAAU,CAC1Cb,IAAK,SACLE,OAAQ,KACRD,IAAKA,EAAIK,OACTF,QAAQ,EACRR,SAAUG,EAAQI,WAClBW,KAAMf,EAAQe,OAEhBT,EAAOqB,eAAed,Q,0wCCjC5B,aAGa+E,E,wKACX,SAAe3F,GACb,IADuB,EACjBZ,EAAS,IAAI,EAAAI,KADI,IAEPZ,KAAKS,YAFE,IAEvB,2BAAiC,KAAtBC,EAAsB,QAC/B,GAAa,WAATA,EAAEO,GAAiB,CACrB,IAAMD,EAAWN,EAAEM,SACnB,GAAIA,EAASwB,SAAWxB,EAASwB,QAAQpB,GAAM,CAC7C,IAAM4F,EAAKhG,EAASwB,QAAQpB,GAC5BZ,EAAOyD,YAAczD,EAAOyD,aAAe+C,EAAG/C,YAC9CzD,EAAOyG,IAAID,MARM,8BAYvB,OAAOxG,O,gCAbX,YAqBA,EAAAI,KAAKC,OAAOkG,I,uFCxBZ,aAIA,2BAAiC1F,GAC/B,OAAIA,aAAe,EAAAT,KACVS,EACgB,mBAARA,EACR,EAAAqE,KAAKwB,cAAc7F,GAEnB,EAAAqE,KAAKyB,MAAM9F,K,6PCXtB,aAMa+F,E,+KACX,SAAuB3C,GACrB,IAAMzD,EAAkC,CAAEyD,OAE1C,OADAzE,KAAKS,WAAWE,KAAK,CAAEM,GAAI,aAAcD,aAClChB,U,gCAJX,mBAQA,EAAAY,KAAKC,OAAOuG,EAAgB,CAC1BnG,GAAI,aACJC,SAAU,SAACC,EAA8BH,GACvC,IAAOK,EAAeF,EAAfE,IAAKI,EAAUN,EAAVM,OACOJ,aAAeL,EAASyD,KAEzChD,EAAOY,cAAP,+BAA6CrB,EAASyD,KAAOpD,O,0PCpBnE,aAEagG,E,4KACX,WAEE,OADArH,KAAKS,WAAWE,KAAK,CAAEM,GAAI,UAAWD,SAAS,OACxChB,U,gCAHX,gBAOA,EAAAY,KAAKC,OAAOwG,EAAa,CACvBpG,GAAI,UACJC,SAAU,SAACC,GACT,IAAOE,EAAeF,EAAfE,IAAKI,EAAUN,EAAVM,OACiB,iBAARJ,IACD,IAAfiG,MAAMjG,KACiE,IAAvE,CAACkG,OAAOC,kBAAmBD,OAAOE,mBAAmBC,QAAQrG,IAC7DA,EAAM,GAAM,GAEfI,EAAOY,cAAc,kBAAmBhB,O,mwHCKjCsG,E,8BAIX,WAAYlG,GAA2B,gBACrC,eACA,IAAMS,EAAOT,EAAOmG,OAAO,GAAG1F,KAAK2F,KAAK,KAFH,OAGrC,EAAKzF,QAAL,UAAkBF,EAAO,GAAH,OAAMA,EAAN,MAAiB,IAAvC,OAA4CT,EAAOmG,OAAO,GAAGxF,SAC7D,EAAKX,OAASA,EAJuB,E,YAJI6D,QAA7C,4B,IAYawC,E,WAAb,uBACE,KAAA3F,IAAc,EACd,KAAAyF,OAAsB,G,mCAItB,WACE,IAAK5H,KAAKmC,GAAI,MAAM,IAAIwF,EAAwB3H,Q,sBAGlD,SAAS+H,GACP/H,KAAKmC,IAAK,EACVnC,KAAKoC,QAAU2F,EAAM3F,QACrBpC,KAAK4H,OAAOjH,KAAKoH,K,uBAGnB,SAAUtG,GACHA,EAAOU,KAAInC,KAAKmC,IAAK,GADU,UAEpBV,EAAOmG,QAFa,IAEpC,2BAA+B,KAApB9C,EAAoB,QAC7B9E,KAAK4H,OAAOjH,KAAKmE,IAHiB,8BAKpC,IAAK9E,KAAKoC,SAAWpC,KAAK4H,OAAOlG,OAAQ,CACvC,IAAMsG,EAAMhI,KAAK4H,OAAO,GACxB5H,KAAKoC,QAAU4F,EAAI5F,a,KAvBzB,yB,IA+Ba6F,E,8BAYX,WAAYC,EAAqB9G,EAAsBc,EAA2BiG,GAAa,wBAC7F,gBAZFhG,IAAK,EACL,EAAAyF,OAAS,GACT,EAAAQ,WAAQ/C,EACR,EAAA8C,UAAQ9C,EACR,EAAAjD,aAAWiD,EAST,EAAKjE,IAAMA,EACX,EAAK8G,WAAaA,EAClB,EAAKhG,KAAOA,EACZ,EAAKiG,KAAOA,EALiF,E,uCAQ/F,SAAe/F,EAAgBf,GAAQ,QACrCe,EAAUpC,KAAKmI,KAAL,UAAenI,KAAKmI,KAApB,aAA6B/F,GAAYA,EACnD,IAAMX,EAAS,IAAIqG,EACbO,EAAO,UAAGrI,KAAKkC,YAAR,iBAAG,EAAW2F,YAAd,aAAG,SAAkB,KAClC,GAAI7H,KAAKsI,cAAe,CAMtB,IAAMC,GALNnG,EAAUpC,KAAKsI,cACZE,QAAQ,YAAapG,GACrBoG,QAAQ,QAASpG,GACjBoG,QAAQ,SAAUH,IAEWI,MAAM,UAClCF,EAAgB7G,OAAS,IAC3BU,EAAUmG,EAAgBV,KAAKa,KAAKC,UAAUtH,UAG5CgH,IACFjG,EAAU,GAAH,OAAMiG,EAAN,aAAkBjG,IAG7BX,EAAOmH,SAAS,CAAExG,UAAShB,IAAKpB,KAAKoB,IAAKc,KAAMlC,KAAKkC,OACrDlC,KAAK6I,UAAUpH,K,4BAGjB,SAAeA,GAEb,GADAzB,KAAK6I,UAAUpH,IACVzB,KAAKkI,YAAclI,KAAK4H,OAAOlG,OAClC,KAAM,wB,+BAIV,SAAkB4G,GAEhB,OADAtI,KAAKsI,cAAgBA,EACdtI,S,GApDsC8H,GAAjD,gC,IAiFalH,E,WAAb,uBACE,KAAAqD,aAAuB,EACvB,KAAAxD,WAA6B,G,qCAG7B,SAAcgE,GAAgD,2BAA3Bf,EAA2B,iCAA3BA,EAA2B,kBAC5D,cAAwBA,EAAxB,eAAoC,CAA/B,IAAMD,EAAS,KAClB7C,EAAK8C,WAAWD,EAAUxC,IAAMwC,EAGlC,IAL4D,EAKtDa,EAAOX,OAAOmF,oBAAoBrE,EAAIO,WAAWiB,QAAO,SAAA8C,GAAC,MAAU,gBAANA,KALP,IAM1CzE,GAN0C,yBAMjDlD,EANiD,QAOpDC,EAAMoD,EAAIO,UAAU5D,GAC1BR,EAAKoE,UAAU5D,GAAOC,EAGH,mBAARA,IACT,EAAAqE,KAAKtE,GAAO,WACV,IAAM4C,EAAK,IAAIpD,EACf,OAAOoD,EAAG5C,GAAH,MAAA4C,EAAE,cARf,2BAAwB,IANoC,mC,KALhE,SAGS,EAAAN,WAA0C,GAuBtC,EAAAgC,KAAY,CAAEjF,WAAY,IAIvC,MACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,MACA,OACA,OACA,OACA,MACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OAEA,a,8mDC7NA,aAOM,EAAO,SAACD,EAAawI,EAAiBjD,GAC1C,IADwE,EAClEkD,EAAeD,EAAO3I,KAAI,SAAA6I,GAC9B,QAAuBA,EAAET,MAAM,MAC/B,MAAO,CAAErH,IADT,KACc+H,KADd,eAFsE,IAKxD3I,EAAOC,YALiD,IAKxE,2BAAmC,KAAxBC,EAAwB,QACjC,GAAa,WAATA,EAAEO,GAAiB,CAGrB,IAFA,IAAMD,EAA8BN,EAAEM,SAChCoI,EAAe,GAFA,aAGhB,IAAMhI,EAAG,KACNiI,EAAqBrI,EAASwB,QAAQpB,GACtCkI,EAAiBL,EAAahD,QAAO,SAAAsD,GAAE,OAAIA,EAAGnI,MAAQA,KAC5D,GAAIkI,EAAe5H,OAAQ,WACL4H,GADK,IACzB,2BAAoC,KAAzBE,EAAyB,QAC9BA,EAAML,KAAKzH,QACb,EAAK2H,EAAeG,EAAML,KAAMpD,IAHX,oCAQjBA,EAAO0D,QACfJ,EAAcpF,aAAc,EAE5BmF,EAAazI,KAAKS,IAdtB,MAAkBuC,OAAOW,KAAKtD,EAASwB,SAAvC,eAAiD,IAiBjD,cAAkB4G,EAAlB,eAAgC,CAA3B,IAAMhI,EAAG,YACLJ,EAASwB,QAAQpB,MA3B0C,gCAiC7DsI,E,yKACX,SAAgBV,GAA2C,IAA1BjD,EAA0B,uDAAF,GACvD,IAAKiD,EAAQ,MAAM,IAAI1D,MAAM,gCAC7B,IAAM9E,EAASR,KAAK8D,QAEpB,OADA,EAAKtD,EAAQwI,EAAQjD,GACdvF,O,gCALX,aASA,EAAAI,KAAKC,OAAO6I,I,yPClDZ,aAQaC,E,2KACX,SAAmB3G,EAAaC,GAC9B,IAAIjC,EAA8B,CAChCgC,MAAKC,OASP,MAPmB,iBAARD,GAAmC,iBAARC,IACpCjC,EAAW,CAAE4I,QAAS5G,IAEL,iBAARA,IACThC,EAAW,CAAEgC,IAAK,IAEpBhD,KAAKS,WAAWE,KAAK,CAAEM,GAAI,SAAUD,aAC9BhB,U,gCAZX,eAgBA,EAAAY,KAAKC,OAAO8I,EAAY,CACtB1I,GAAI,SACJC,SAAU,SAACC,EAA8BH,GACvC,IAAOK,EAAeF,EAAfE,IAAKI,EAAUN,EAAVM,OACNoI,EAAMxI,EAAMA,EAAIK,OAAS,KAC/B,MAAmB,iBAARmI,EACFpI,EAAOY,cAAc,iBAAkBhB,GAEhB,iBAArBL,EAAS4I,SAAwB5I,EAAS4I,UAAYC,EACxDpI,EAAOY,cAAP,gCAA8CrB,EAAS4I,SAAWvI,GAE/C,iBAAjBL,EAASgC,KAAoBhC,EAASgC,IAAM6G,EAC9CpI,EAAOY,cAAP,yCAAuDrB,EAASgC,KAAO3B,GAEpD,iBAAjBL,EAASiC,KAAoBjC,EAASiC,IAAM4G,EAC9CpI,EAAOY,cAAP,wCAAsDrB,EAASiC,KAAO5B,QAD/E,M,0PCtCJ,aAMayI,E,4KACX,SAAoBC,GAClB,IAAM/I,EAA+B,CAAE+I,SAEvC,OADA/J,KAAKS,WAAWE,KAAK,CAAEM,GAAI,UAAWD,aAC/BhB,U,gCAJX,gBAQA,EAAAY,KAAKC,OAAOiJ,EAAa,CACvB7I,GAAI,UACJC,SAAU,SAACC,EAA8BH,GACvC,IAAOK,EAAeF,EAAfE,IAAKI,EAAUN,EAAVM,OACET,EAAS+I,MAAMvD,KAAKwD,OAAO3I,KAEvCI,EAAOY,cAAP,yBAAuCrB,EAAS+I,OAAS1I,O,sPCpB/D,aAOa4I,E,wKACX,SAAe,EAAS9G,GAAkB,MAElCnC,EAA2B,CAAEiC,IAAA,EAAKE,UADxCA,EAAS,UAAGA,SAAH,UAGT,OADAnD,KAAKS,WAAWE,KAAK,CAAEM,GAAI,MAAOD,aAC3BhB,O,mBAET,SAAiBiD,EAASE,GAAkB,MAEpCnC,EAA2B,CAAEiC,MAAKE,UADxCA,EAAS,UAAGA,SAAH,UAGT,OADAnD,KAAKS,WAAWE,KAAK,CAAEM,GAAI,MAAOD,aAC3BhB,O,mBAET,SAAiBiD,EAASE,GAAkB,MAEpCnC,EAA2B,CAAEiC,MAAKE,UADxCA,EAAS,UAAGA,SAAH,UAGT,OADAnD,KAAKS,WAAWE,KAAK,CAAEM,GAAI,MAAOD,aAC3BhB,O,oBAET,SAAkBiD,EAASE,GAAkB,MAErCnC,EAA2B,CAAEiC,MAAKE,UADxCA,EAAS,UAAGA,SAAH,UAGT,OADAnD,KAAKS,WAAWE,KAAK,CAAEM,GAAI,MAAOD,aAC3BhB,U,gCAvBX,YA2BA,EAAAY,KAAKC,OAAOoJ,EAAS,CACnBhJ,GAAI,MACJC,SAAU,SAACC,EAA8BH,GACvC,IAAQK,EAAgBF,EAAhBE,IAAKI,EAAWN,EAAXM,OACLwB,EAAmBjC,EAAnBiC,IAAmBjC,EAAdmC,UAEA9B,GAAO4B,GACTxB,EAAOY,cAAP,gCAA8CY,GAAO5B,GAEnDA,EAAM4B,GACRxB,EAAOY,cAAP,kCAAgDY,GAAO5B,O,+DC5CtE,aAEA,EAAAT,KAAKoE,UAAU5C,QAAU,EAAAxB,KAAKoE,UAAUkF,IAAM,SAAsB9H,GAClE,IAAMoB,EAAYxD,KAAKS,WAAWT,KAAKS,WAAWiB,OAAS,GAG3D,OAFA8B,EAAUxC,SAAWwC,EAAUxC,UAAY,GAC3CwC,EAAUxC,SAASmJ,SAAW/H,EACvBpC,O,sPCNT,aAOaoK,E,wKACX,SAAgB,EAASjH,GAAkB,MAEnCnC,EAA2B,CAAEgC,IAAA,EAAKG,UADxCA,EAAS,UAAGA,SAAH,UAGT,OADAnD,KAAKS,WAAWE,KAAK,CAAEM,GAAI,MAAOD,aAC3BhB,O,kBAET,SAAiBgD,EAASG,GAAkB,MAEpCnC,EAA2B,CAAEgC,MAAKG,UADxCA,EAAS,UAAGA,SAAH,UAGT,OADAnD,KAAKS,WAAWE,KAAK,CAAEM,GAAI,MAAOD,aAC3BhB,O,mBAET,SAAkBgD,EAASG,GAAkB,MAErCnC,EAA2B,CAAEgC,MAAKG,UADxCA,EAAS,UAAGA,SAAH,UAGT,OADAnD,KAAKS,WAAWE,KAAK,CAAEM,GAAI,MAAOD,aAC3BhB,O,qBAET,SAAoBgD,EAASG,GAAkB,MAEvCnC,EAA2B,CAAEgC,MAAKG,UADxCA,EAAS,UAAGA,SAAH,UAGT,OADAnD,KAAKS,WAAWE,KAAK,CAAEM,GAAI,MAAOD,aAC3BhB,U,gCAvBX,YA2BA,EAAAY,KAAKC,OAAOuJ,EAAS,CACnBnJ,GAAI,MACJC,SAAU,SAACC,EAA8BH,GACvC,IAAQK,EAAgBF,EAAhBE,IAAKI,EAAWN,EAAXM,OACLuB,EAAmBhC,EAAnBgC,IAAmBhC,EAAdmC,UAEA9B,GAAO2B,GACTvB,EAAOY,cAAP,iCAA+CW,GAAO3B,GAEpDA,EAAM2B,GACRvB,EAAOY,cAAP,qCAAmDW,GAAO3B,O,0PC5CzE,aAEagJ,E,6KACX,WAEE,OADArK,KAAKS,WAAWE,KAAK,CAAEM,GAAI,WAAYD,SAAS,OACzChB,U,gCAHX,iBAOA,EAAAY,KAAKC,OAAOwJ,EAAc,CACxBpJ,GAAI,WACJC,SAAU,SAACC,GACT,IAAQE,EAAgBF,EAAhBE,IAAKI,EAAWN,EAAXM,OACPoI,EAAMxI,EAAMA,EAAIK,OAAS,KAC/B,GAAmB,iBAARmI,IAAoBA,EAI/B,GAA4C,oBAAxClG,OAAOqB,UAAUC,SAASC,KAAK7D,GAanCI,EAAOY,cAAP,wBAA8ChB,OAb9C,CACE,IAAIiJ,GAAY,EAChB,IAAK,IAAMlJ,KAAOC,EAChB,GAAKA,EAAIkJ,eAAenJ,GAAxB,CACAkJ,GAAY,EACZ,MAEGA,GACH7I,EAAOY,cAAP,yBAA+ChB,Q,uPC1BvD,aAGamJ,E,yKACX,WAGE,OADAxK,KAAKS,WAAWE,KAAK,CAAEM,GAAI,QAASD,SADD,CAAEwB,QAAS,KAAMkE,QAAQ,KAErD1G,O,mBAET,WACE,IAAMgB,EAA6B,CAAEwB,aAAS6C,EAAWqB,QAAQ,GAEjE,OADA1G,KAAKS,WAAWE,KAAK,CAAEM,GAAI,QAASD,aAC7BhB,U,gCATX,aAaA,EAAAY,KAAKC,OAAO2J,I,yPChBZ,aAEaC,E,2KACX,WAEE,OADAzK,KAAKS,WAAWE,KAAK,CAAEM,GAAI,WACpBjB,U,gCAHX,eAOA,EAAAY,KAAKC,OAAO4J,EAAY,CACtBxJ,GAAI,SACJC,SAAU,SAACC,GACT,IAAOE,EAAqBF,EAArBE,IAAKqB,EAAgBvB,EAAhBuB,KAAMjB,EAAUN,EAAVM,OAClB,MAAa,WAATiB,EAA0BjB,EAAOY,cAAP,sCAAoDK,EAApD,KAA6DrB,GACvFiG,MAAMjG,GAAaI,EAAOY,cAAP,iCAAuDhB,GACzE8D,SAAS9D,QAAd,EAA2BI,EAAOY,cAAP,sCAA4DhB,O,8mDCd3F,aACA,QAsBaqJ,E,2KACX,SAAkBlI,GAAsE,IAA5BuD,EAA4B,uDAAF,GAChF4E,EAAmB,KACvB,GAAInI,EAEF,IAAK,IAAMpB,KADXuJ,EAAmB,GACDnI,EAChBmI,EAAiBvJ,GAAO,EAAAb,gBAAgBiC,EAAQpB,IAGhD2E,EAAO3E,MACT2E,EAAO3E,IAAM,EAAAb,gBAAgBwF,EAAO3E,MAElC2E,EAAOqC,QACTrC,EAAOqC,MAAQ,EAAA7H,gBAAgBwF,EAAOqC,QAExC,IAAMpH,EAA8B,CAAEwB,QAAQmI,EAAuC5E,UAErF,OADA/F,KAAKS,WAAWE,KAAK,CAAEM,GAAI,SAAUD,aAC9BhB,O,yBAET,SAAuBoB,EAAYZ,GACjC,IAAK,IAAIoK,EAAI5K,KAAKS,WAAWiB,OAAS,EAAGkJ,GAAK,EAAGA,IAAK,CACpD,IAAMC,EAAO7K,KAAKS,WAAWmK,GAC7B,GAAgB,WAAZC,EAAK5J,GAAT,CACK4J,EAAK7J,WAAU6J,EAAK7J,SAAW,IAC/B6J,EAAK7J,SAASwB,UAASqI,EAAK7J,SAASwB,QAAU,IAC/CqI,EAAK7J,SAAS+E,SAAQ8E,EAAK7J,SAAS+E,OAAS,IAClD8E,EAAK7J,SAASwB,QAAQpB,GAAO,EAAAb,gBAAgBC,GAC7C,OAEF,OAAOR,U,gCA7BX,eAiCA,EAAAY,KAAKC,OAAO6J,EAAY,CACtBzJ,GAAI,SACJwB,QAFsB,SAEdzB,GACN,IAAMuC,EAAM,GACNf,EAAUxB,EAASwB,QACzB,GAAIA,EAEF,IADA,IACA,MADamB,OAAOW,KAAK9B,GACzB,eAAwB,CAAnB,IAAMpB,EAAG,KACN0J,EAAetI,EAAQpB,GAC7BmC,EAAInC,GAAO0J,EAAajF,QAG5B,OAAOtC,GAETrC,SAAU,SAACC,EAA6BH,GAA+B,MAC7DK,EAA0CF,EAA1CE,IAAaE,GAA6BJ,EAArCG,OAAqCH,EAA7BI,YAAYE,EAAiBN,EAAjBM,OAAQiB,EAASvB,EAATuB,KACjCF,EAAoBxB,EAApBwB,QAASuD,EAAW/E,EAAX+E,OACXC,EAAM,UAAGD,EAAOC,cAAV,SAGZ,IAAK3E,EAAK,OAAOI,EAAOY,cAAP,uCAAqDhB,EAArD,KAA6DA,GAC9E,GAAa,WAATqB,EAAmB,OAAOjB,EAAOY,cAAP,sCAAoDK,EAApD,KAA6DrB,GAC3F,GAAIA,aAAe+C,OAAQ,OAAO3C,EAAOY,cAAP,qCAA2DhB,GAC7F,GAAIA,aAAe6C,KAAM,OAAOzC,EAAOY,cAAP,oCAA0DhB,GAC1F,GAAIsB,MAAMC,QAAQvB,GAAM,OAAOI,EAAOY,cAAP,qCAA2DhB,GAE1F,IAAM0J,EAAapH,OAAOW,KAAKjD,GAE/B,GAAImB,EAAS,CAGX,IADA,IAAMwI,EAAcrH,OAAOW,KAAK9B,GAChC,MAAkBwI,EAAlB,eAA+B,CAA1B,IAAM5J,EAAG,KAGN6J,OAAkB5F,IADdhE,EAAID,GAGd,KADkBG,EAAWkI,SAAW1D,EAAO0D,WAC9BwB,EAAjB,CAIA,IACMjJ,EADYQ,EAAQpB,GACEa,UAAU,CACpCb,MACAE,OAAOD,EACPA,IAAKA,EAAID,GACTI,OAAQJ,KAAOC,EACfL,SAAUO,EACVW,KAAM,GAAF,SAAMf,EAAQe,MAAd,CAAoBd,MAE1BK,EAAOqB,eAAed,IAIxB,IAAKgE,EAAQ,CACX,IAAMkF,EAAYH,EAAW9E,QAAO,SAAAkF,GAAC,OAAKH,EAAYjJ,SAASoJ,MAC3DD,EAAUxJ,QACZD,EAAOY,cAAP,oCAAkD6I,EAAUrD,KAAK,OAASxG,IAKhF,GAAI0E,EAAO3E,IAAK,WACI2J,GADJ,IACd,2BAA8B,KAAnB,EAAmB,QACtB,EAAYhF,EAAO3E,IAAIa,UAAU,CACrCb,IAAA,EACAE,OAAQD,EACRA,IAAK,EACLG,QAAQ,EACRR,SAAUO,EACVW,KAAM,GAAF,SAAMf,EAAQe,MAAd,CAAoB,MAE1BT,EAAOqB,eAAe,IAVV,+BAchB,GAAIiD,EAAOqC,MAAO,WACE2C,GADF,IAChB,2BAA8B,KAAnB,EAAmB,QACtBlI,EAASxB,EAAI,GACb,EAAY0E,EAAOqC,MAAMnG,UAAU,CACvCb,IAAA,EACAE,OAAQD,EACRA,IAAKwB,EACLrB,QAAQ,EACRR,SAAUO,EACVW,KAAM,GAAF,SAAMf,EAAQe,MAAd,CAAoB,MAE1BT,EAAOqB,eAAe,IAXR,oC,0PCnItB,aAEMsI,EAAa,kBAENC,E,6KACX,WAEE,OADArL,KAAKS,WAAWE,KAAK,CAAEM,GAAI,WAAYD,SAAS,OACzChB,U,gCAHX,iBAOA,EAAAY,KAAKC,OAAOwK,EAAc,CACxBpK,GAAI,WACJC,SAAU,SAACC,EAA6BH,GACtC,IAAQK,EAAsBF,EAAtBE,IAAKI,EAAiBN,EAAjBM,OAAQiB,EAASvB,EAATuB,KACrB,OAAKrB,EACQ,WAATqB,EAA0BjB,EAAOY,cAAc,4BAA6BhB,GAC7D,KAAfA,EAAIK,OAAsBD,EAAOY,cAAc,mCAAoChB,GAClF+J,EAAW5E,KAAKnF,QAArB,EAAkCI,EAAOY,cAAc,qCAAsChB,GAH5EI,EAAOY,cAAc,uBAAwBhB,O,qpECflE,a,IAwBMiK,E,2KAEJ,SAAmBtK,GAEjB,OADAhB,KAAKS,WAAWE,KAAK,CAAEM,GAAI,SAAUD,aAC9BhB,O,6BAGT,SAA8BuL,GAA8B,eACrDA,IAAUA,EAAS,IAClB,WAAYA,IAASA,EAAOC,QAAS,GAE3C,IAJ0D,EAIpDC,EAAS,GACThL,EAAaT,KAAKS,WALkC,IAM1CA,GAN0C,IAM1D,2BAA4B,KAAjBC,EAAiB,QAAE+K,EAAO/K,EAAEO,IAAMP,GANa,8BAQ1D,IAAMF,EAAc,WAClB,GAAIiL,EAAM,OAAY,CACpB,IADoB,EACdC,EAAa,GACbC,EAAW,GAFG,IAGF,EAAKrH,QAHH,IAGpB,2BAA+B,KAApBlD,EAAoB,QACvBwK,EAAY,EAAKC,IAAIzK,GACvBwK,EAAUE,cAAcH,EAAShL,KAAKS,GAC1CsK,EAAWtK,GAAOwK,EAAUG,gBAAV,OAA+BR,GAA/B,IAAuCC,QAAQ,MAN/C,8BAQpB,MAAO,CACL9I,KAAM,SACNiJ,WACAD,cAIJ,GAAID,EAAM,MAAW,OACbjJ,EAAO,UAAGiJ,EAAM,MAAUzK,gBAAnB,aAAG,EAA0BwB,QAC1C,UACEE,KAAM,SACFF,EAAU,CAAEwJ,MAAOxJ,EAAQuJ,gBAAR,OAA6BR,GAA7B,IAAqCC,QAAQ,MAAa,IAIrF,GAAIC,EAAM,QAAcA,EAAM,MAAW,CACvC,IAAMQ,EAAI,CAAEvJ,KAAM,UAElB,GADI+I,EAAM,QAAWQ,EAAEC,OAAS,SAC5BT,EAAM,QAAa,OAEfU,GADE,UAAGV,EAAM,QAAYzK,gBAArB,aAAG,EAA4B+I,OACtB9E,WAAWkH,MAAM,0BAC9BA,IAASF,EAAEG,QAAUD,EAAM,IAEjC,OAAOF,EAGT,GAAIR,EAAM,OACR,MAAO,CAAE/I,KAAM,UAGjB,GAAI+I,EAAM,QACR,MAAO,CAAE/I,KAAM,WAGjB,GAAI+I,EAAM,QACR,MAAO,CAAE/I,KAAM,WAGjB,GAAI+I,EAAM,KACR,MAAO,CAAE/I,KAAM,QAGjB,GAAI+I,EAAM,SACR,MAAO,CAAE/I,KAAM,SAAU2J,UAAW,GAAIC,UAAW,GAAIF,QAAS,cAGlE,GAAIX,EAAM,KACR,MAAO,CAAE/I,KAAM,OAAQwJ,OAAQ,aAGjC,GAAIT,EAAM,MAAW,CACnB,IAAMpK,EAAMoK,EAAM,MAAUzK,SAASwB,QAErC,MAAO,CAAEE,KAnGjB,SAAgCrB,GAC9B,MAAmB,iBAARA,EAAyB,SACjB,iBAARA,EAA0BA,EAAM,GAAM,EAAK,UAAY,SAC/C,kBAARA,EAA0B,UACjCA,QAA0C,OAC1CsB,MAAMC,QAAQvB,GAAa,QACZ,WAAf,EAAOA,GAAyB,cAApC,EA4FmBkL,CAAuBlL,GACrBmL,MAAOnL,GAGxB,GAAIoK,EAAM,IAAS,SACXgB,GAA6B,UAAAhB,EAAM,WAAN,mBAAezK,gBAAf,eAAyBb,UAAW,GACvE,GAAmC,IAA/BsM,EAAoB/K,OACtB,OAAO+K,EAAoB,GAAGV,gBAAvB,OAA4CR,GAA5C,IAAoDC,QAAQ,KAC/D,GAAIiB,EAAoB/K,OAAS,EAAG,CACxC,IAAMgL,EAAaD,EAAoBpM,KAAI,SAAA4L,GAAC,OAAIA,EAAEF,gBAAF,OAAuBR,GAAvB,IAA+BC,QAAQ,QACjF,EAAOkB,EAAW,GAAGhK,KACrBiK,GAAWD,EAAW5K,MAAK,SAAA8K,GAAE,OAAIA,EAAGlK,OAAS,KAC7CmK,GAAYH,EAAW5K,MAAK,SAAA8K,GAAE,QAAM,UAAWA,MAErD,OADeD,GAAWE,GAAY,CAAC,SAAU,SAAU,WAAW9K,SAAS,GAEtE,CAAEW,KAAA,EAAMoK,KAAMJ,EAAWrM,KAAI,SAAAuM,GAAE,OAAIA,EAAGJ,UAEtC,CAAEO,MAAON,EAAoBpM,KAAI,SAAA4L,GAAC,OAAIA,EAAEF,gBAAF,OAAuBR,GAAvB,IAA+BC,QAAQ,UAK1F,OAAIC,EAAM,SACD,UADT,EAnFkB,GAwFpB,IAAKjL,EAAQ,OAAOA,EAIpB,GADIiL,EAAM,WAAcjL,EAAO6L,UAAY,GACvCZ,EAAM,OAAY,OACpB,GAA+B,UAAAA,EAAM,cAAN,eAAkBzK,WAAY,GAArD4I,EAAR,EAAQA,QAAS5G,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,IACH,iBAARD,IACTxC,EAAO6L,UAAYrJ,GAEF,iBAARC,IACTzC,EAAO8L,UAAYrJ,GAEE,iBAAZ2G,IACTpJ,EAAO6L,UAAYzC,EACnBpJ,EAAO8L,UAAY1C,GAIvB,GAAI6B,EAAM,QAAa,OACrB,EAAqBA,EAAM,QAAYzK,SAA/B,EAAR,EAAQgC,IAAK,EAAb,EAAaC,IACE,UAAGwI,EAAM,QAAYzK,SAASmC,iBAA9B,UAEb3C,EAAOwM,QAAU,EACjBxM,EAAOyM,QAAU,IAEjBzM,EAAO0M,iBAAmB,EAC1B1M,EAAO2M,iBAAmB,GAG9B,GAAI1B,EAAM,IAAS,OACX,EAAMA,EAAM,IAAQzK,SAASgC,IACpB,UAAGyI,EAAM,IAAQzK,SAASmC,iBAA1B,SAEb3C,EAAOwM,QAAU,EAEjBxM,EAAO0M,iBAAmB,EAG9B,GAAIzB,EAAM,IAAS,OACX,EAAMA,EAAM,IAAQzK,SAASiC,IACpB,UAAGwI,EAAM,IAAQzK,SAASmC,iBAA1B,SAEb3C,EAAOyM,QAAU,EAEjBzM,EAAO2M,iBAAmB,EAG1B1B,EAAM,QACRjL,EAAOgM,MAAQf,EAAM,MAAUzK,SAASwB,SAhJgB,UAoJ1C/B,GApJ0C,IAoJ1D,2BAA4B,KAAjB,EAAiB,QAC1B,GAAa,WAAT,EAAEQ,IACD,EAAED,SAAP,CACA,cAAkB2C,OAAOW,KAAK,EAAEtD,UAAhC,eAA2C,CAAtC,IAAMI,EAAG,KACA,cAARA,IACJZ,EAAOY,GAAO,EAAEJ,SAASI,IAE3B,GAAK,EAAEJ,SAASoM,UAChB,cAAkBzJ,OAAOW,KAAK,EAAEtD,SAASoM,WAAzC,eAAqD,CAAhD,IAAM,EAAG,KACA,cAAR,KACc,CAAC,UAAM/H,GAAWtD,SAASvB,EAAO,MAEpDA,EAAO,GAAO,EAAEQ,SAASoM,UAAU,QAhKmB,8BAoK1D,IAAMC,EAAI,WAAG,EAAA9B,GAAO+B,aAAV,aAAG,SAAe9M,GAC5B,OAAI6M,IAAS9B,EAAOC,OACX,CAAE6B,QAGJ7M,O,gCAIX,EAAAI,KAAKC,OAAOyK,I,+wCC5MZ,aAEaiC,E,+KACX,WACE,OAAQvN,KAAKiE,c,sBAEf,SAAoBzD,GAGlB,GAFAR,KAAKiE,aAAc,EAEfzD,EAAQ,WACMA,EAAOC,YADb,IACV,2BAAmC,KAAxBC,EAAwB,QACjCV,KAAKS,WAAWE,KAAKD,IAFb,+BAMZ,OAAOV,U,gCAbX,iBAiBA,EAAAY,KAAKC,OAAO0M,I,w1DCnBZ,aAGMC,EAAe,SAAfA,EAAgBjK,EAAKkK,GACzB9J,OAAOW,KAAKf,GAAK2C,SAAQ,SAAA9E,GACvB,IAAMC,EAAMkC,EAAInC,GAChBqM,EAAQpM,GACJA,GAAsB,WAAf,EAAOA,IAChBmM,EAAanM,EAAKoM,OAKlBC,EAAa,SAAbA,EAAclN,EAAawI,GAAyB,UACxCxI,EAAOC,YADiC,IACxD,2BAAmC,KAAxBC,EAAwB,QACjC,GAAa,WAATA,EAAEO,GAAiB,CACrB,IAAMD,EAA8BN,EAAEM,SACtC,GAAIgI,EAAQ,WACUA,GADV,IACV,2BAA4B,KAC1B,IAD0B,QACSP,MAAM,MAAlCrH,EAAP,KAAeuM,EAAf,WACM3G,EAAUhG,EAASwB,QAAQpB,GAC5B4F,IAEK2G,EAAWjM,OACnBgM,EAAW1G,EAAI,CAAC2G,EAAW9F,KAAK,OAEhCb,EAAG/C,aAAc,IATX,oCAaVjD,EAAS+E,OAAO0D,SAAU,EAIzBT,GACHwE,EAAa9M,GAAG,SAACW,GACXA,aAAe,EAAAT,MACjB8M,EAAWrM,OAxBqC,gCA+B7CuM,E,8KACX,SAAqB5E,GACnB,IAAMxI,EAASR,KAAK8D,QAEpB,OADA4J,EAAWlN,EAAQwI,GACZxI,O,gCAJX,kBAQA,EAAAI,KAAKC,OAAO+M,I,4PCpDZ,aAIMC,EAAU,SAAVA,EAAWC,GACf,IAAMC,EAAQpK,OAAOqB,UAAUC,SAASC,KAAK4I,GACvCE,EAAW,oBAAsBD,EAEvC,IAAKC,KADW,mBAAqBD,GAEnC,OAAOD,EAIT,IAAK,IAAM1M,KAAO0M,EAChBA,EAAG1M,GAAOyM,EAAQC,EAAG1M,IAGvB,GAAI4M,GAAYF,EAAGrN,WAAY,CAC7B,IAAMmK,EAAI,IAAI,EAAAhK,KAEd,OADAgK,EAAEnK,WAAaqN,EAAGrN,WACXmK,EAGT,OAAOkD,GAGIG,E,yKACX,SAAgBC,GAEd,OADAlO,KAAKS,WAAaoN,EAAQK,GAAKzN,WACxBT,O,oBAET,WACE,MAAO,CACLiE,YAAajE,KAAKiE,YAClBxD,WAAYT,KAAKS,c,mBAGrB,WACE,OAAOT,KAAKmO,c,gCAZhB,kBAgBA,EAAAvN,KAAKC,OAAOoN,I,yPC1CZ,aAEaG,E,2KACX,WAEE,OADApO,KAAKS,WAAWE,KAAK,CAAEM,GAAI,SAAUD,SAAS,OACvChB,U,gCAHX,eAOA,EAAAY,KAAKC,OAAOuN,EAAY,CACtBnN,GAAI,SACJC,SAAU,SAACC,GACT,IAAQuB,EAAsBvB,EAAtBuB,KAAMjB,EAAgBN,EAAhBM,OAAQJ,EAAQF,EAARE,IACtB,GAAa,WAATqB,EAAmB,OAAOjB,EAAOY,cAAP,kBAAwChB,O,qPCb1E,aAMagN,E,2KACX,WAEE,OADArO,KAAKS,WAAWE,KAAK,CAAEM,GAAI,SAAUD,SAAS,OACvChB,O,qBAET,WAEE,OADAA,KAAKS,WAAWE,KAAK,CAAEM,GAAI,UAAWD,SAAS,OACxChB,O,mBAET,SAAiBsO,GACf,IAAMtN,EAA6B,CAAEsN,SAErC,OADAtO,KAAKS,WAAWE,KAAK,CAAEM,GAAI,QAASD,aAC7BhB,O,yBAET,WAEE,OADAA,KAAKS,WAAWE,KAAK,CAAEM,GAAI,gBACpBjB,O,yBAET,WAEE,OADAA,KAAKS,WAAWE,KAAK,CAAEM,GAAI,gBACpBjB,O,mBAET,WAEE,OADAA,KAAKS,WAAWE,KAAK,CAAEM,GAAI,UACpBjB,O,sBAET,WAEE,OADAA,KAAKS,WAAWE,KAAK,CAAEM,GAAI,aACpBjB,O,uBAET,WAEE,OADAA,KAAKS,WAAWE,KAAK,CAAEM,GAAI,cACpBjB,U,gCAhCX,WAoCA,EAAAY,KAAKC,OACHwN,EACA,CACEpN,GAAI,SACJC,SAAU,SAACC,GACT,IAAQE,EAAwBF,EAAxBE,IAAKwD,EAAmB1D,EAAnB0D,OAAQpD,EAAWN,EAAXM,OACf8M,EAAO,IAAIrK,KAAK7C,GACtB,IAAK8D,SAASoJ,EAAKpK,WAAY,OAAO1C,EAAOY,cAAP,yBAA+ChB,GACrFwD,EAAO0J,KAGX,CACEtN,GAAI,UACJC,SAAU,SAACC,GACT,IAAQE,EAAwBF,EAAxBE,IAAKwD,EAAmB1D,EAAnB0D,OAAQpD,EAAWN,EAAXM,OACf+M,EAAWC,WAAWpN,GAC5B,GAAIiG,MAAMkH,GAAW,OAAO/M,EAAOY,cAAP,0BAAgDhB,GAC5EwD,EAAO2J,KAGX,CACEvN,GAAI,QACJC,SAAU,SAACC,EAA6BH,GACtC,IAAQK,EAAwBF,EAAxBE,IAAKwD,EAAmB1D,EAAnB0D,OAAQpD,EAAWN,EAAXM,OACb6M,EAAUtN,EAAVsN,MACFI,EAASC,SAAStN,EAAKiN,UAAS,IACtC,GAAIhH,MAAMoH,GAAS,OAAOjN,EAAOY,cAAP,wBAA8ChB,GACxEwD,EAAO6J,KAGX,CACEzN,GAAI,cACJC,SAAU,SAACC,GACT,IAAQE,EAAgBF,EAAhBE,KACRwD,EADwB1D,EAAX0D,QACNmF,OAAO3I,GAAKuN,iBAGvB,CACE3N,GAAI,cACJC,SAAU,SAACC,GACT,IAAQE,EAAgBF,EAAhBE,KACRwD,EADwB1D,EAAX0D,QACNmF,OAAO3I,GAAKwN,iBAGvB,CACE5N,GAAI,QACJC,SAAU,SAACC,IAET0D,EADmB1D,EAAX0D,QACD,IAAIX,QAGf,CACEjD,GAAI,WACJC,SAAU,SAACC,GACT,IAAQE,EAAgBF,EAAhBE,KACRwD,EADwB1D,EAAX0D,QACNmF,OAAO3I,MAGlB,CACEJ,GAAI,YACJC,SAAU,SAACC,GACT,IAAQE,EAAgBF,EAAhBE,KACRwD,EADwB1D,EAAX0D,QACNmF,OAAO3I,GAAKyN,Y,yvCCxGzB,aAGMC,E,0KACJ,SAAoBxL,EAAOyL,GACzB,IAAMC,EAAmBjP,KAAKS,WAAWwF,QAAO,SAAAvF,GAAC,MAAc,YAAVA,aAAA,EAAAA,EAAGO,OACxD,IAAKgO,EAAiBvN,OAAQ,MAAM,IAAI4D,MAAJ,iCACpC,IAAK/B,EAAK,OAAOA,EAHoC,UAI7B0L,GAJ6B,IAIrD,2BAA0C,KAElCzM,EAFkC,QACbxB,SACFwB,QACzB,IAAKA,EAAS,OAAOe,EAErB,IADA,IAAMe,EAAOX,OAAOW,KAAK9B,GACzB,MAAkB8B,EAAlB,eAAwB,CAAnB,IAAMlD,EAAG,KACNA,KAAOmC,IACPyL,EACFA,EAAQ5N,EAAKmC,GAEbA,EAAInC,QAAOiE,KAdkC,8BAmBrD,OAAO9B,I,kBAGT,WACE,IAAM2L,EAAUlP,KAAKmP,MAAM,IAC3B,OAAOxL,OAAOW,KAAK4K,K,kBAGrB,SAAsBpJ,GACpB,IAD+B,EACzBvC,EAAM,GADmB,IAEfvD,KAAKsE,QAFU,IAE/B,2BAA6B,KAAlB6G,EAAkB,QACvBA,KAAKrF,IACPvC,EAAI4H,GAAKrF,EAAOqF,KAJW,8BAO/B,OAAO5H,O,gCAIX,EAAA3C,KAAKC,OAAOkO,I,yPC1CZ,aAEaK,E,2KACX,WAEE,OADApP,KAAKS,WAAWE,KAAK,CAAEM,GAAI,SAAUD,SAAS,OACvChB,U,gCAHX,eAOA,EAAAY,KAAKC,OAAOuO,EAAY,CACtBnO,GAAI,SACJC,SAAU,SAACC,GACT,IAAQE,EAAgBF,EAAhBE,IAAKI,EAAWN,EAAXM,OACb,IAAKJ,EAAK,OAAOI,EAAOY,cAAP,yBAA+ChB,O,8dCbpE,aAMagO,E,2KACX,SAAkB3M,GAChB,IAAM1B,EAA+B,CAAE0B,QAEvC,OADA1C,KAAKS,WAAWE,KAAK,CAAEM,GAAI,SAAUD,aAC9BhB,U,gCAJX,eAQA,EAAAY,KAAKC,OAAOwO,EAAY,CACtBpO,GAAI,SACJC,SAAU,SAACC,EAA6BH,GACtC,IAAQK,EAAgBF,EAAhBE,IAAKI,EAAWN,EAAXM,OACLiB,EAAS1B,EAAT0B,KAEJA,IADe,EAAOrB,IAExBI,EAAOY,cAAP,mBAAiCK,GAAQrB,O,yPCrB/C,aAMaiO,E,2KACX,SAAkBC,GAChB,IAAMvO,EAA+B,CAAEuO,UAEvC,OADAvP,KAAKS,WAAWE,KAAK,CAAEM,GAAI,SAAUD,aAC9BhB,U,gCAJX,eAQA,EAAAY,KAAKC,OAAOyO,EAAY,CACtBrO,GAAI,SACJC,SAAU,SAACC,EAA6BH,GACtC,IAAQK,EAAgBF,EAAhBE,IAAKI,EAAWN,EAAXM,OACL8N,EAAWvO,EAAXuO,OACFC,EAAM,IAAIC,IAChB,IAAK,IAAMrO,KAAOC,EAAK,CACrB,IAAIwB,EAASxB,EAAID,GAEjB,GADImO,IAAQ1M,EAAS0M,EAAO1M,IACxB2M,EAAIE,IAAI7M,GACV,OAAOpB,EAAOY,cAAP,UAAwBQ,EAAxB,4BAA0DxB,GAEnEmO,EAAIG,IAAI9M,Q,89CC1Bd,aAUM+M,E,8KACJ,SAAqB5O,GACnB,IAAQI,EAAQJ,EAARI,IACFK,EAAS,IAAI,EAAAwG,4BAA4BjH,EAASA,SAASkH,WAAY9G,EAAKJ,EAASkB,KAAMlB,EAASA,SAASmH,MAGnH,GAFA1G,EAAO2G,MAAQpH,EAASK,IAEpBrB,KAAKiE,YAAa,CACpB,GAAI,CAAC,UAAMoB,GAAWtD,SAASN,EAAO2G,OAAQ,OAAO3G,EAErD,IADiBA,EAAO2G,MACX,CACX,IAAM1F,EAAO,EAAOjB,EAAO2G,OAS3B,GARqBpI,KAAKS,WAAWJ,KAAI,SAAAK,GACvC,MAAa,WAATA,EAAEO,IACO,UAATP,EAAEO,GADwB,SAEjB,WAATP,EAAEO,GAAwB,SACjB,YAATP,EAAEO,GAAyB,UAClB,YAATP,EAAEO,GAAyB,eAA/B,KACCgF,QAAO,SAAA4J,GAAC,OAAIA,KACoB9N,SAASW,GAE1C,OAAOjB,GAIb,IACE,IADE,EACIoD,EAAS,SAACiL,GACV9O,EAASM,QACXN,EAASM,OAAON,EAASI,KAAO0O,EAChC9O,EAASK,IAAMyO,GAEfrO,EAAO2G,MAAQ0H,GANjB,IASsB9P,KAAKS,YAT3B,IASF,2BAAyC,OAA9B+C,EAA8B,QACjCC,EAA0B,EAAA7C,KAAK8C,WAAWF,EAAUvC,IAG1D,IAAKwC,EAAW,MAAM,IAAI6B,MAAJ,+BAAkC9B,EAAUvC,KAElE,IAAME,EAA8B,CAClC0D,SACApD,OAAQA,EAAOsO,kBAAP,UAAyBvM,EAAUxC,gBAAnC,aAAyB,EAAoBmJ,UACrD9I,IAAKL,EAASK,IACdD,IAAKJ,EAASI,IACdE,OAAQN,EAASM,OACjBE,OAAQR,EAASQ,OACjBkB,KAAM,EAAO1B,EAASK,KACtBE,WAAYP,EAASA,SACrBkB,KAAMlB,EAASkB,MAGjB,GADAuB,EAAUvC,SAASC,EAASqC,EAAUxC,WACjCS,EAAOU,GAAI,OAAOV,GA3BvB,+BA6BH,MAAOqD,GAEN,GAAU,wBAANA,EAA6B,MAAMA,EAEzC,OAAOrD,I,sBAGT,SAAoBJ,GAA8C,IAApCL,EAAoC,uDAAF,GAC9D,OAAOhB,KAAKiC,UAAU,CACpBZ,MACAL,WACAI,IAAI,KACJE,OAAO,KACPE,QAAQ,EACRU,KAAM,O,0BAIV,SAAwBb,EAASL,GAC/BhB,KAAKkB,SAASG,EAAKL,GAAUgP,iB,gCAIjC,EAAApP,KAAKC,OAAO+O,I,yPCtFZ,aAQaK,E,2KACX,SAAkBC,GAChB,IAAMlP,EAA+B,CAAEkP,YAEvC,OADAlQ,KAAKS,WAAWE,KAAK,CAAEM,GAAI,SAAUD,aAC9BhB,U,gCAJX,eAQA,EAAAY,KAAKC,OAAOoP,EAAY,CACtBhP,GAAI,SACJC,SAAU,SAACC,EAA6BH,GACtC,IAAQK,EAAgBF,EAAhBE,IAAKI,EAAWN,EAAXM,OACLyO,EAAalP,EAAbkP,SACR,IACE,IAAMC,EAAWD,EAAS7O,EAAKF,GAC/B,GAAwB,kBAAbgP,EAIT,aAHiB,IAAbA,GACF1O,EAAOY,cAAP,mBAAyChB,IAI7C,GAAwB,iBAAb8O,EACT,OAAO1O,EAAOY,cAAc8N,EAAU9O,GAEzC,MAAMyD,GACL,GAAU,wBAANA,EAA6B,MAAMA,EACvC,OAAOrD,EAAOY,cAAcyC,EAAGzD,SClCjC+O,EAA2B,G,OAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBjL,IAAjBkL,EACH,OAAOA,EAAa3Q,QAGrB,IAAIC,EAASuQ,EAAyBE,GAAY,CAGjD1Q,QAAS,IAOV,OAHA4Q,EAAoBF,GAAUpL,KAAKrF,EAAOD,QAASC,EAAQA,EAAOD,QAASyQ,GAGpExQ,EAAOD,QClBWyQ,CAAoB,M","file":"itsa.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ItsaLib\"] = factory();\n\telse\n\t\troot[\"ItsaLib\"] = factory();\n})(this, function() {\nreturn ","import {Itsa} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\n\nclass ItsaAll {\n  all (this:Itsa, ...options:(ItsaOrPrimative | ItsaOrPrimative[])[]):Itsa {\n    const schemas = options.flat().map(x => primitiveToItsa(x)) as Itsa[];\n    for (const schema of schemas) {\n      for (const p of schema.predicates) {\n        this.predicates.push(p);\n      }\n    }\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaAll);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaAll { }\n}\n","import {Itsa} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\n\nexport class ItsaAnd {\n  and (this:Itsa, ...options:(ItsaOrPrimative | ItsaOrPrimative[])[]):Itsa {\n    const schemas = options.flat().map(x => primitiveToItsa(x)) as Itsa[];\n    for (const schema of schemas) {\n      for (const p of schema.predicates) {\n        this.predicates.push(p);\n      }\n    }\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaAnd);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaAnd { }\n}\n","import {ItsaValidateContext, Itsa, ItsaValidator} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\n\ninterface ItsaAnySettings {\n  schemas: Itsa[];\n}\n\nclass ItsaAny {\n  any (this:Itsa, ...options:(ItsaOrPrimative | ItsaOrPrimative[])[]):Itsa {\n    const schemas = options.flat().map(x => primitiveToItsa(x)) as Itsa[];\n    const settings:ItsaAnySettings = { schemas };\n    this.predicates.push({ id: 'any', settings });\n    return this as any as Itsa;\n  }\n}\n\nconst validate:ItsaValidator = {\n  id: 'any',\n  validate: (context:ItsaValidateContext, settings:ItsaAnySettings) => {\n    const { key, val, parent, validation, exists, result } = context;\n    const { schemas } = settings;\n\n    if (schemas.length === 0)\n      return;\n\n    const truthyErrors = [];\n    for (const subSchema of schemas) {\n      const isSchemaTruthy = subSchema.predicates.find(p => !['equal', 'falsy'].includes(p.id));\n\n      const subResult = subSchema._validate({\n        key,\n        parent,\n        val,\n        exists,\n        settings: validation,\n        path: context.path,\n      });\n      if (subResult.ok) {\n        return;\n      }else if (isSchemaTruthy) {\n        truthyErrors.push(subResult.message);\n      }\n    }\n\n    if (truthyErrors.length === 1) {\n      result.registerError(truthyErrors[0], val);\n    }else{\n      result.registerError(`No schemas matched.`, val);\n    }\n  }\n};\n\nItsa.extend(ItsaAny, validate);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaAny { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaAnything {\n  anything(this:Itsa):Itsa {\n    this.predicates.push({ id: 'anything', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaAnything, {\n  id: 'anything',\n  validate: (context:ItsaValidateContext) => {\n\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaAnything { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\n\ninterface ItsaArraySettings {\n  example?: Itsa;\n}\n\nexport class ItsaArray {\n  array(this:Itsa, example?:ItsaOrPrimative):Itsa {\n    const settings:ItsaArraySettings = { example: example ? primitiveToItsa(example) : null };\n    this.predicates.push({ id: 'array', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaArray, {\n  id: 'array',\n  builder(settings: ItsaArraySettings) {\n    return [];\n  },\n  validate: (context:ItsaValidateContext, settings:ItsaArraySettings) => {\n    const { val, validation, exists, result, type } = context;\n    const { example } = settings;\n\n    if (!Array.isArray(val)) return result.registerError(`Expected array but found ${type}`, val);\n\n    if (!example) return;\n    if (!val.length) return;\n\n    for (let key=0; key < val.length; key++) {\n      const subVal = val[key];\n      const subResult = example._validate({\n        key,\n        parent: val,\n        val:subVal,\n        exists,\n        settings: validation,\n        path: [...context.path, key],\n      });\n      result.registerResult(subResult);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaArray { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport interface ItsaBetweenExtraSettings {\n  inclusive?:boolean;\n}\n\nexport interface ItsaBetweenSettings extends ItsaBetweenExtraSettings {\n  min:any;\n  max:any;\n  inclusive?:boolean;\n}\n\nexport class ItsaBetween {\n  between(this:Itsa, min:any, max:any, extraSettings:ItsaBetweenExtraSettings = {}):Itsa{\n    const settings = extraSettings as ItsaBetweenSettings;\n    settings.min = min;\n    settings.max = max;\n    this.predicates.push({ id: 'between', settings:settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaBetween, {\n  id: 'between',\n  validate: (context:ItsaValidateContext, settings:ItsaBetweenSettings) => {\n    const { val, result } = context;\n    const { min, max } = settings;\n    const inclusive = settings.inclusive ?? true;\n    const isTooLow = inclusive ? (val < min) : (val <= min);\n    if (isTooLow) result.registerError(`Value cannot be under ${min}`, val);\n    const isTooHigh = inclusive ? (val > max) : (val >= max);\n    if (isTooHigh) result.registerError(`Value cannot be above ${max}`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaBetween { }\n}\n","\nimport { ItsaValidateContext } from \"./itsa\";\nimport { Itsa } from \"./itsa\";\n\nexport class ItsaBoolean {\n  boolean(this:Itsa):Itsa{\n    this.predicates.push({ id: 'boolean', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaBoolean, {\n  id: 'boolean',\n  validate: (context:ItsaValidateContext) => {\n    const { type, result, val } = context;\n    if (type !== 'boolean') result.registerError(`Expected bool but found ${type}`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaBoolean { }\n}\n","\nimport { Itsa, ItsaValidator } from './itsa';\n\nfunction build<T>(schema:Itsa):T {\n  for (const predicate of schema.predicates) {\n    const validator: ItsaValidator = Itsa.validators[predicate.id];\n    if (validator.builder) return validator.builder(predicate.settings);\n  }\n};\n\nclass ItsaBuild {\n  build<X>(this:Itsa, overrides?:X):any {\n    const obj = build<X>(this) as any;\n    if (obj && typeof obj === 'object' && overrides && typeof overrides === 'object') {\n      Object.assign(obj, overrides);\n    }\n    return obj;\n  }\n}\n\nItsa.extend(ItsaBuild);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaBuild { }\n}\n","\nimport {itsa, Itsa} from \"./itsa\";\n\nexport const deepClone = function deepClone(obj) {\n\n  function clone(val) {\n    const type = typeof val;\n\n    if (val === null || type !== \"object\") return val;\n\n    if (Array.isArray(val)) return val.map(v => clone(v));\n    if (val instanceof Itsa) {\n      const it = new Itsa();\n      it._isOptional = val._isOptional;\n      it.predicates = clone(val.predicates);\n      return it;\n    }\n    if (val instanceof Date) return new Date(val.getTime());\n    if (val instanceof RegExp) return new RegExp(val);\n\n    const clonedObj = {};\n    for (const key of Object.keys(val)) {\n      clonedObj[key] = clone(val[key]);\n    }\n    return clonedObj;\n  }\n\n  return clone(obj);\n};\n\nexport class ItsaClone {\n  clone(this:Itsa):Itsa{\n    return deepClone(this);\n  }\n}\n\nItsa.extend(ItsaClone);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaClone { }\n}\n","\nimport { ItsaValidateContext } from \"./itsa\";\nimport { Itsa } from \"./itsa\";\n\nexport interface ItsaConstructorSettings {\n  cls:Function;\n}\n\nexport class ItsaConstructor {\n  constructorIs(this:Itsa, cls:Function):Itsa{\n    const settings: ItsaConstructorSettings = { cls };\n    this.predicates.push({ id: 'constructor', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaConstructor, {\n  id: 'constructor',\n  validate: (context:ItsaValidateContext, settings: ItsaConstructorSettings) => {\n    const { val, result } = context;\n    const isMatch = val !== null && val !== undefined && val.constructor === settings.cls;\n    if (!isMatch) return result.registerError(`Expected to be ${settings.cls}`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaConstructor { }\n}\n","\nimport { Itsa, ItsaValidateContext } from \"./itsa\";\n\nexport interface ItsaConvertSettings {\n  converter:Function;\n}\n\nexport class ItsaConvert {\n  convert(this:Itsa, converter:Function):Itsa{\n    const settings: ItsaConvertSettings = { converter };\n    this.predicates.push({ id: 'convert', settings });\n    return this as any as Itsa;\n  }\n  to(this:Itsa, converter:Function):Itsa{\n    const settings: ItsaConvertSettings = { converter };\n    this.predicates.push({ id: 'convert', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaConvert, {\n  id: 'convert',\n  validate: (context:ItsaValidateContext, settings: ItsaConvertSettings) => {\n    const { val, setVal, result } = context;\n    const { converter } = settings;\n    if (typeof converter !== 'function') return;\n    try {\n      const newVal = converter(val);\n      setVal(newVal);\n    }catch(e){\n      result.registerError(e, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaConvert { }\n}\n\n","\nimport { ItsaValidateContext } from \"./itsa\";\nimport { Itsa } from \"./itsa\";\n\nexport class ItsaDate {\n  date(this:Itsa):Itsa{\n    this.predicates.push({ id: 'date', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaDate, {\n  id: 'date',\n  validate: (context:ItsaValidateContext) => {\n    const { val, result } = context;\n    const type = Object.prototype.toString.call(val);\n    if (type !== \"[object Date]\") {\n      return result.registerError(`Expected date but found ${type}`, val);\n    }\n    if (!isFinite(val)) {\n      result.registerError(`Date is not valid`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaDate { }\n}\n\n","\nimport { Itsa, itsa } from \"./itsa\";\nimport { ItsaObjectSettings } from './object';\n\nconst combineSchemas = (target:Itsa, source:Itsa) => {\n  for (const p of source.predicates) {\n    if (p.id === 'object') {\n      const settings = p.settings as ItsaObjectSettings;\n      if (settings.example) {\n        for (const key of Object.keys(settings.example)) {\n          target.addProperty(key, settings.example[key]);\n        }\n      }\n    }else{\n      target.predicates.push(p);\n    }\n  }\n\n  // If any allow extras, all should\n  const allowExtras = !!source.predicates.find(p => p.id === 'object' && p.settings?.config?.extras === true);\n  if (allowExtras) {\n    target.predicates.filter(p => p.id === 'object').forEach(p => p.settings.config.extras = true);\n  }\n};\n\nexport class ItsaSchema {\n  static schema: Itsa;\n  constructor(overrides?) {\n    const schema = (this as any).constructor.schema;\n    return schema.build(overrides);\n  }\n}\n\nexport function itsaSchema (schema?:Itsa):any {\n  return function (target: any, key?: string) {\n    if (key) {\n      return itsaField(schema)(target, key);\n    }\n    if (target.schema && schema) {\n      combineSchemas(target.schema, schema);\n    }else if (schema) {\n      target.schema = schema;\n    }else if (target.schema) {\n      // nothing to do\n    }else{\n      target.schema = itsa.object({});\n    }\n  };\n}\n\nexport function itsaField (schema:Itsa) {\n  if (schema === undefined) throw new Error(`itsaSchema field schema may not be undefined`);\n  return function (target: any, key: string) {\n    const cls = target.constructor;\n    if (!Object.getOwnPropertyDescriptor(cls, 'schema')) {\n      const parentSchema = cls.schema;\n      cls.schema = parentSchema ? parentSchema.clone() : itsa.object({});\n    }\n    cls.schema.addProperty(key, schema);\n  };\n}\n","\nimport { Itsa, ItsaValidateContext } from \"./itsa\";\n\nexport interface ItsaDefaultSettings {\n  val?:any;\n  falsy?: boolean;\n}\n\nexport class ItsaDefault {\n  default(this:Itsa, val, settings:ItsaDefaultSettings = {}):Itsa{\n    settings.val = val;\n    this.predicates.push({ id: 'default', settings });\n    return this as any as Itsa;\n  }\n  defaultNow(this:Itsa):Itsa{\n    this.predicates.push({ id: 'defaultNow', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(\n  ItsaDefault,\n  ...[\n    {\n      id: 'default',\n      builder(settings:ItsaDefaultSettings) {\n        return settings.val;\n      },\n      validate: (context:ItsaValidateContext, settings:ItsaDefaultSettings) => {\n        const { val, setVal } = context;\n        const falsy = settings.falsy ?? false;\n        const doReplace = falsy ? !val : (val === null || val === undefined);\n        if (doReplace) {\n          setVal(settings.val);\n        }\n      }\n    },\n    {\n      id: 'defaultNow',\n      builder(settings:ItsaDefaultSettings) {\n        return new Date();\n      },\n      validate: (context:ItsaValidateContext) => {\n        const { val, setVal } = context;\n        if (val === null || val === undefined) {\n          setVal(new Date());\n        }\n      }\n    }\n  ]\n);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaDefault { }\n}\n\n","\nimport { Itsa, ItsaValidateContext } from \"./itsa\";\n\nconst rx = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\nexport class ItsaEmail {\n  email(this:Itsa):Itsa{\n    this.predicates.push({ id: 'email', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaEmail, {\n  id: 'email',\n  validate: (context:ItsaValidateContext) => {\n    const { val, type, result } = context;\n    if (type !== 'string') return result.registerError(`Expected email but found ${type}`, val);\n    const isValid = rx.test(val);\n    if (!isValid) {\n      result.registerError('Email address is invalid', val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaEmail { }\n}\n\n","\nimport { Itsa, ItsaValidateContext } from \"./itsa\";\n\nexport interface ItsaEqualSettings {\n  strict?:boolean;\n  example?:any;\n}\n\nexport class ItsaEqual {\n  equal(this:Itsa, val:any, settings:ItsaEqualSettings = {}):Itsa{\n    settings.example = val;\n    this.predicates.push({ id: 'equal', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaEqual, {\n  id: 'equal',\n  validate: (context:ItsaValidateContext, settings:ItsaEqualSettings) => {\n    const { val, result } = context;\n    const { example } = settings;\n    const strict = settings.strict ?? true;\n    const isEqual = strict ? (val === example) : (val == example);\n    if (!isEqual) {\n      result.registerError(`Did not equal ${example}`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaEqual { }\n}\n\n","\nimport { Itsa } from \"./itsa\";\n\nexport class ItsaExtend {\n  extend(this:Itsa, extendor:(itsa:Itsa) => void):Itsa{\n    extendor(this);\n    return this;\n  }\n}\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaExtend { }\n}\n\nItsa.extend(ItsaExtend);\n","\nimport { Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaFalsy {\n  falsy(this:Itsa):Itsa{\n    this.predicates.push({ id: 'falsy', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaFalsy, {\n  id: 'falsy',\n  validate: (context:ItsaValidateContext) => {\n    const { val, result } = context;\n    if (val) return result.registerError(`Expected falsy value.`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaFalsy { }\n}\n\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\n\ninterface ItsaFunctionSettings {\n  length?:Itsa;\n}\n\ninterface ItsaFunctionIncomingSettings {\n  length?:ItsaOrPrimative;\n}\n\nexport class ItsaFunction {\n  function(this:Itsa, settings:ItsaFunctionIncomingSettings = {}):Itsa{\n    if (settings.length) settings.length = primitiveToItsa(settings.length);\n    this.predicates.push({ id: 'function', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaFunction, {\n  id: 'function',\n  validate: (context:ItsaValidateContext, settings:ItsaFunctionSettings) => {\n    const { val, type, result } = context;\n    if (type !== 'function') return result.registerError('Expected function', val);\n    if (settings.length) {\n      const subResult = settings.length._validate({\n        key: 'length',\n        parent: null,\n        val: val.length,\n        exists: true,\n        settings: context.validation,\n        path: context.path,\n      });\n      result.registerResult(subResult);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaFunction { }\n}\n\n","\nimport { Itsa, itsa } from \"./itsa\";\nimport { ItsaObjectSettings } from './object';\n\nexport class ItsaGet {\n  get(this:Itsa, key:string):Itsa{\n    const schema = new Itsa();\n    for (const p of this.predicates) {\n      if (p.id === 'object') {\n        const settings = p.settings as ItsaObjectSettings;\n        if (settings.example && settings.example[key]) {\n          const ex = settings.example[key];\n          schema._isOptional = schema._isOptional || ex._isOptional;\n          schema.and(ex);\n        }\n      }\n    }\n    return schema;\n  }\n}\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaGet { }\n}\n\nItsa.extend(ItsaGet);\n","\nimport {itsa, Itsa} from \"./itsa\";\n\nexport declare type ItsaOrPrimative = Itsa | number | string | boolean | null | undefined | Function;\n\nexport function primitiveToItsa (val:ItsaOrPrimative):Itsa {\n  if (val instanceof Itsa) {\n    return val;\n  }else if (typeof val === 'function') {\n    return itsa.constructorIs(val);\n  }else {\n    return itsa.equal(val);\n  }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaInstanceOfSettings {\n  cls: any;\n}\n\nexport class ItsaInstanceOf {\n  instanceof(this: Itsa, cls:any):Itsa {\n    const settings:ItsaInstanceOfSettings = { cls };\n    this.predicates.push({ id: 'instanceof', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaInstanceOf, {\n  id: 'instanceof',\n  validate: (context: ItsaValidateContext, settings:ItsaInstanceOfSettings) => {\n    const {val, result} = context;\n    const isInstance = val instanceof settings.cls;\n    if (!isInstance) {\n      result.registerError(`Expected instance of ${settings.cls}`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaInstanceOf { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaInteger {\n  integer(this:Itsa):Itsa {\n    this.predicates.push({ id: 'integer', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaInteger, {\n  id: 'integer',\n  validate: (context: ItsaValidateContext) => {\n    const {val, result} = context;\n    const valid = typeof val === \"number\"\n      && isNaN(val) === false\n      && [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY].indexOf(val) === -1\n      && val % 1 === 0;\n    if (!valid) {\n      result.registerError('Invalid integer', val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaInteger { }\n}\n","import { ItsaDefaultSettings } from './default';\n\nexport interface ItsaInternalValidationSettings {\n  val:any;\n  key?:string|number;\n  path:(string|number)[];\n  parent?:object|[];\n  exists: boolean;\n  settings:ItsaValidationSettings;\n}\n\nexport interface ItsaValidationSettings {\n  partial?:boolean;\n  exhaustive?:boolean;\n  hint?:string;\n}\n\nexport interface ItsaError {\n  message:string;\n  key:string | number;\n  path:(string | number)[];\n}\n\nexport class ItsaValidationException extends Error {\n  message: string;\n  result: ItsaValidationResult;\n\n  constructor(result:ItsaValidationResult) {\n    super();\n    const path = result.errors[0].path.join('.');\n    this.message = `${path ? `${path}: ` : ''}${result.errors[0].message}`;\n    this.result = result;\n  }\n}\n\nexport class ItsaValidationResult {\n  ok: boolean = true;\n  errors: ItsaError[] = [];\n  value: any;\n  message?: string;\n\n  okOrThrow(){\n    if (!this.ok) throw new ItsaValidationException(this);\n  }\n\n  addError(error:ItsaError) {\n    this.ok = false;\n    this.message = error.message;\n    this.errors.push(error);\n  }\n\n  addResult(result: ItsaValidationResult) {\n    if (!result.ok) this.ok = false;\n    for (const e of result.errors) {\n      this.errors.push(e);\n    }\n    if (!this.message && this.errors.length) {\n      const err = this.errors[0];\n      this.message = err.message;\n      // if (err.path && err.path.length) {\n      //   this.message += ` (${(err.path||[]).join('.')})`;\n      // }\n    }\n  }\n}\n\nexport class ItsaValidationResultBuilder extends ItsaValidationResult {\n  ok = true;\n  errors = [];\n  value = undefined;\n  hint? = undefined;\n  message? = undefined;\n\n  private readonly exhaustive: boolean;\n  private readonly key: string | number;\n  private readonly path: (string | number)[];\n  private messageFormat?: string;\n\n  constructor(exhaustive: boolean, key: string | number, path: (string | number)[], hint?: string) {\n    super();\n    this.key = key;\n    this.exhaustive = exhaustive;\n    this.path = path;\n    this.hint = hint;\n  }\n\n  registerError (message:string, val: any) {\n    message = this.hint ? `${this.hint}: ${message}` : message;\n    const result = new ItsaValidationResult();\n    const pathStr = this.path?.join?.('.');\n    if (this.messageFormat) {\n      message = this.messageFormat\n        .replace('{message}', message)\n        .replace('{msg}', message)\n        .replace('{path}', pathStr);\n\n      const msgDataSegments = message.split('{data}');\n      if (msgDataSegments.length > 1) {\n        message = msgDataSegments.join(JSON.stringify(val));\n      }\n    }else{\n      if (pathStr) {\n        message = `${pathStr}: ${message}`;\n      }\n    }\n    result.addError({ message, key: this.key, path: this.path });\n    this.addResult(result);\n  }\n\n  registerResult(result: ItsaValidationResult):void{\n    this.addResult(result);\n    if (!this.exhaustive && this.errors.length) {\n      throw 'STOP_ON_FIRST_ERROR';\n    }\n  }\n\n  withMessageFormat(messageFormat?: string):this {\n    this.messageFormat = messageFormat;\n    return this;\n  }\n}\n\nexport interface ItsaValidateContext {\n  parent?:any;\n  key?:string | number;\n  path:(string | number)[];\n  exists: boolean;\n  val:any;\n  type: string;\n  setVal:(val:any) => void;\n  validation: ItsaValidationSettings;\n  result: ItsaValidationResultBuilder;\n}\n\nexport interface ItsaPredicate {\n  id:string;\n  settings?:any;\n}\n\nexport interface ItsaValidator {\n  id:string;\n  validate:(ItsaValidateContext, any) => void;\n  builder?:(settings) => any;\n}\n\ntype ItsaSubclass = new (...args: any[]) => any;\n\nexport class Itsa {\n  _isOptional: boolean = false;\n  predicates:ItsaPredicate[] = [];\n  static validators:{[key:string]:ItsaValidator} = {};\n\n  static extend(cls:ItsaSubclass, ...validators: ItsaValidator[]) {\n    for (const validator of validators) {\n      Itsa.validators[validator.id] = validator;\n    }\n\n    const keys = Object.getOwnPropertyNames(cls.prototype).filter(m => m !== 'constructor');\n    for (const key of keys) {\n      const val = cls.prototype[key];\n      Itsa.prototype[key] = val;\n\n      /* istanbul ignore next */\n      if (typeof val === 'function') {\n        itsa[key] = (...args) => {\n          const it = new Itsa();\n          return it[key](...args);\n        };\n      }\n    }\n  }\n}\n\nexport const itsa:Itsa = { predicates: [] } as Itsa;\n\nexport type { ItsaOrPrimative, primitiveToItsa } from './helpers';\n\nimport './all';\nimport './and';\nimport './any';\nimport './anything';\nimport './array';\nimport './between';\nimport './boolean';\nimport './build';\nimport './clone';\nimport './constructor';\nimport './convert';\nimport './date';\nimport './default';\nimport './email';\nimport './equal';\nimport './extend';\nimport './falsy';\nimport './function';\nimport './instanceof';\nimport './integer';\nimport './keep';\nimport './length';\nimport './matches';\nimport './max';\nimport './message';\nimport './min';\nimport './not-empty';\nimport './null';\nimport './number';\nimport './object';\nimport './objectid';\nimport './optional';\nimport './partialed';\nimport './serialize';\nimport './string';\nimport './to';\nimport './touch';\nimport './truthy';\nimport './typeof';\nimport './unique';\nimport './validate';\nimport './verify';\nimport './get';\nimport './openapi';\n\nexport * from './decorators';\n","\nimport {Itsa} from \"./itsa\";\nimport { ItsaObjectSettings } from './object';\n\ninterface ItsaKeepConfig {\n  partial?: boolean;\n}\n\nconst keep = (schema:Itsa, fields:string[], config:ItsaKeepConfig):void => {\n  const parsedFields = fields.map(f => {\n    const [key, ...rest] = f.split('.');\n    return { key, rest};\n  });\n  for (const p of schema.predicates) {\n    if (p.id === 'object') {\n      const settings:ItsaObjectSettings = p.settings;\n      const keysToDelete = [];\n      for (const key of Object.keys(settings.example)) {\n        const exampleForKey:Itsa = settings.example[key];\n        const matchingFields = parsedFields.filter(pf => pf.key === key);\n        if (matchingFields.length) {\n          for (const field of matchingFields) {\n            if (field.rest.length) {\n              keep(exampleForKey, field.rest, config);\n            }else{\n              // nothing to do\n            }\n          }\n        }else if (config.partial){\n          exampleForKey._isOptional = true;\n        }else{\n          keysToDelete.push(key);\n        }\n      }\n      for (const key of keysToDelete) {\n        delete settings.example[key];\n      }\n    }\n  }\n};\n\nexport class ItsaKeep {\n  keep(this:Itsa, fields:string[], config:ItsaKeepConfig = {}):Itsa{\n    if (!fields) throw new Error('fields parameter is required');\n    const schema = this.clone();\n    keep(schema, fields, config);\n    return schema as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaKeep);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaKeep { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaLengthSettings {\n  exactly?:number;\n  min?:number;\n  max?:number;\n}\n\nexport class ItsaLength {\n  length(this: Itsa, min?:number, max?:number):Itsa {\n    let settings:ItsaLengthSettings = {\n      min, max\n    };\n    if (typeof min === 'number' && typeof max !== 'number') {\n      settings = { exactly: min };\n    }\n    if (typeof min !== 'number') {\n      settings = { min: 1 };\n    }\n    this.predicates.push({ id: 'length', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaLength, {\n  id: 'length',\n  validate: (context: ItsaValidateContext, settings:ItsaLengthSettings) => {\n    const {val, result} = context;\n    const len = val ? val.length : null;\n    if (typeof len !== 'number') {\n      return result.registerError('Invalid length', val);\n    }\n    if (typeof settings.exactly === 'number' && settings.exactly !== len) {\n      return result.registerError(`Expected length to be ${settings.exactly}`, val);\n    }\n    if (typeof settings.min === 'number' && settings.min > len) {\n      return result.registerError(`Expected length to be at least ${settings.min}`, val);\n    }\n    if (typeof settings.max === 'number' && settings.max < len) {\n      return result.registerError(`Expected length to be at most ${settings.max}`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaLength { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaMatchesSettings {\n  regex:RegExp;\n}\n\nexport class ItsaMatches {\n  matches(this: Itsa, regex:RegExp):Itsa {\n    const settings:ItsaMatchesSettings = { regex };\n    this.predicates.push({ id: 'matches', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaMatches, {\n  id: 'matches',\n  validate: (context: ItsaValidateContext, settings: ItsaMatchesSettings) => {\n    const {val, result} = context;\n    const valid = settings.regex.test(String(val));\n    if (!valid) {\n      result.registerError(`Does not match ${settings.regex}`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaMatches { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaMaxSettings {\n  max:any;\n  inclusive:boolean;\n}\n\nexport class ItsaMax {\n  max(this:Itsa, max:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? true;\n    const settings:ItsaMaxSettings = { max, inclusive };\n    this.predicates.push({ id: 'max', settings });\n    return this as any as Itsa;\n  }\n  under(this:Itsa, max:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? false;\n    const settings:ItsaMaxSettings = { max, inclusive };\n    this.predicates.push({ id: 'max', settings });\n    return this as any as Itsa;\n  }\n  below(this:Itsa, max:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? false;\n    const settings:ItsaMaxSettings = { max, inclusive };\n    this.predicates.push({ id: 'max', settings });\n    return this as any as Itsa;\n  }\n  atMost(this:Itsa, max:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? true;\n    const settings:ItsaMaxSettings = { max, inclusive };\n    this.predicates.push({ id: 'max', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaMax, {\n  id: 'max',\n  validate: (context: ItsaValidateContext, settings: ItsaMaxSettings) => {\n    const { val, result } = context;\n    const { max, inclusive } = settings;\n    if (inclusive) {\n      const ok = val <= max;\n      if (!ok) result.registerError(`Value must be at most ${max}`, val);\n    } else {\n      const ok = val < max;\n      if (!ok) result.registerError(`Value must be less than ${max}`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaMax { }\n}\n","import {Itsa} from \"./itsa\";\n\nItsa.prototype.message = Itsa.prototype.msg = function (this: Itsa, message: string):Itsa {\n  const predicate = this.predicates[this.predicates.length - 1];\n  predicate.settings = predicate.settings || {};\n  predicate.settings._message = message;\n  return this;\n};\n\ndeclare module './itsa' {\n  interface Itsa {\n    message(message:string):this;\n    msg(message:string):this;\n  }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaMinSettings {\n  min:any;\n  inclusive:boolean;\n}\n\nexport class ItsaMin {\n  min(this: Itsa, min:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? true;\n    const settings:ItsaMinSettings = { min, inclusive };\n    this.predicates.push({ id: 'min', settings });\n    return this as any as Itsa;\n  }\n  over(this: Itsa, min:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? false;\n    const settings:ItsaMinSettings = { min, inclusive };\n    this.predicates.push({ id: 'min', settings });\n    return this as any as Itsa;\n  }\n  above(this: Itsa, min:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? false;\n    const settings:ItsaMinSettings = { min, inclusive };\n    this.predicates.push({ id: 'min', settings });\n    return this as any as Itsa;\n  }\n  atLeast(this: Itsa, min:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? true;\n    const settings:ItsaMinSettings = { min, inclusive };\n    this.predicates.push({ id: 'min', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaMin, {\n  id: 'min',\n  validate: (context: ItsaValidateContext, settings: ItsaMinSettings) => {\n    const { val, result } = context;\n    const { min, inclusive } = settings;\n    if (inclusive) {\n      const ok = val >= min;\n      if (!ok) result.registerError(`Value must be at least ${min}`, val);\n    } else {\n      const ok = val > min;\n      if (!ok) result.registerError(`Value must be greater than ${min}`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaMin { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaNotEmpty {\n  notEmpty(this:Itsa):Itsa {\n    this.predicates.push({ id: 'notEmpty', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaNotEmpty, {\n  id: 'notEmpty',\n  validate: (context: ItsaValidateContext) => {\n    const { val, result } = context;\n    const len = val ? val.length : null;\n    if (typeof len === 'number' && len) {\n      return;\n    }\n\n    if (Object.prototype.toString.call(val) === \"[object Object]\") {\n      let hasFields = false;\n      for (const key in val) {\n        if (!val.hasOwnProperty(key)) { continue; }\n        hasFields = true;\n        break;\n      }\n      if (!hasFields) {\n        result.registerError(`Object cannot be empty`, val);\n      }\n      return;\n    }\n\n    result.registerError(`Value cannot be empty`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaNotEmpty { }\n}\n","import {Itsa} from \"./itsa\";\nimport {ItsaEqualSettings} from \"./equal\";\n\nexport class ItsaNull {\n  null(this:Itsa):Itsa {\n    const settings:ItsaEqualSettings = { example: null, strict: true };\n    this.predicates.push({ id: 'equal', settings });\n    return this as any as Itsa;\n  }\n  undef(this:Itsa):Itsa {\n    const settings:ItsaEqualSettings = { example: undefined, strict: true };\n    this.predicates.push({ id: 'equal', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaNull);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaNull { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaNumber {\n  number(this:Itsa):Itsa {\n    this.predicates.push({ id: 'number' });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaNumber, {\n  id: 'number',\n  validate: (context: ItsaValidateContext) => {\n    const {val, type, result} = context;\n    if (type !== 'number') return result.registerError(`Expected number but type is ${type}.`, val);\n    if (isNaN(val)) return result.registerError(`Expected number but found NaN.`, val);\n    if (!isFinite(val)) return result.registerError(`Expected number but found infinity.`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaNumber { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\n\ninterface ItsaObjectExample {\n  [key: string]:Itsa;\n}\n\ninterface ItsaObjectExampleWithPrimitives {\n  [key: string]:ItsaOrPrimative;\n}\n\ninterface ItsaObjectConfig {\n  extras?: boolean;\n  key?: Itsa;\n  value?: Itsa;\n  partial?: boolean;\n}\n\nexport interface ItsaObjectSettings {\n  example?: ItsaObjectExample;\n  config: ItsaObjectConfig;\n}\n\nexport class ItsaObject {\n  object(this:Itsa, example?:ItsaObjectExampleWithPrimitives, config:ItsaObjectConfig = {}):Itsa{\n    let convertedExample = null;\n    if (example) {\n      convertedExample = {};\n      for (const key in example) {\n        convertedExample[key] = primitiveToItsa(example[key]);\n      }\n    }\n    if (config.key) {\n      config.key = primitiveToItsa(config.key);\n    }\n    if (config.value) {\n      config.value = primitiveToItsa(config.value);\n    }\n    const settings:ItsaObjectSettings = { example:convertedExample as ItsaObjectExample, config };\n    this.predicates.push({ id: 'object', settings });\n    return this as any as Itsa;\n  }\n  addProperty(this:Itsa, key:string, schema:ItsaOrPrimative):Itsa {\n    for (let i = this.predicates.length - 1; i >= 0; i--) {\n      const pred = this.predicates[i];\n      if (pred.id !== 'object') continue;\n      if (!pred.settings) pred.settings = {};\n      if (!pred.settings.example) pred.settings.example = {};\n      if (!pred.settings.config) pred.settings.config = {};\n      pred.settings.example[key] = primitiveToItsa(schema);\n      break;\n    }\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaObject, {\n  id: 'object',\n  builder(settings: ItsaObjectSettings) {\n    const obj = {};\n    const example = settings.example as any;\n    if (example) {\n      const keys = Object.keys(example);\n      for (const key of keys) {\n        const schemaForKey = example[key];\n        obj[key] = schemaForKey.build();\n      }\n    }\n    return obj;\n  },\n  validate: (context:ItsaValidateContext, settings:ItsaObjectSettings) => {\n    const { val, parent, validation, result, type } = context;\n    const { example, config } = settings;\n    const extras = config.extras ?? false;\n\n    // Validate object\n    if (!val) return result.registerError(`Expected object but value is ${val}.`, val);\n    if (type !== \"object\") return result.registerError(`Expected object but type is ${type}.`, val);\n    if (val instanceof RegExp) return result.registerError(`Expected object but type is regex.`, val);\n    if (val instanceof Date) return result.registerError(`Expected object but type is date.`, val);\n    if (Array.isArray(val)) return result.registerError(`Expected object but type is array.`, val);\n\n    const objectKeys = Object.keys(val);\n\n    if (example) {\n      // Validate according to example\n      const exampleKeys = Object.keys(example);\n      for (const key of exampleKeys) {\n        // For root object, we might skip missing fields\n        const v = val[key];\n        const isMissing = v === undefined;\n        const isPartial = validation.partial || config.partial;\n        if (isPartial && isMissing) {\n          continue;\n        }\n\n        const subSchema = example[key];\n        const subResult = subSchema._validate({\n          key,\n          parent:val,\n          val: val[key],\n          exists: key in val,\n          settings: validation,\n          path: [...context.path, key],\n        });\n        result.registerResult(subResult);\n      }\n\n      // Error for extra properties?\n      if (!extras) {\n        const extraKeys = objectKeys.filter(k => !exampleKeys.includes(k));\n        if (extraKeys.length) {\n          result.registerError(`Extra unknown properties: ${extraKeys.join(', ')}`, val);\n        }\n      }\n    }\n\n    if (config.key) {\n      for (const key of objectKeys) {\n        const subResult = config.key._validate({\n          key,\n          parent: val,\n          val: key,\n          exists: true,\n          settings: validation,\n          path: [...context.path, key],\n        });\n        result.registerResult(subResult);\n      }\n    }\n\n    if (config.value) {\n      for (const key of objectKeys) {\n        const subVal = val[key];\n        const subResult = config.value._validate({\n          key,\n          parent: val,\n          val: subVal,\n          exists: true,\n          settings: validation,\n          path: [...context.path, key],\n        });\n        result.registerResult(subResult);\n      }\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaObject { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\nconst rxObjectId = /^[0-9a-f]{24}$/i;\n\nexport class ItsaObjectId {\n  objectid(this:Itsa):Itsa{\n    this.predicates.push({ id: 'objectid', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaObjectId, {\n  id: 'objectid',\n  validate: (context:ItsaValidateContext, settings?:any) => {\n    const { val, result, type } = context;\n    if (!val) return result.registerError('ObjectId is required', val);\n    if (type !== 'string') return result.registerError('ObjectId must be a string', val);\n    if (val.length !== 24) return result.registerError('ObjectId must have 24 characters', val);\n    if (!rxObjectId.test(val)) return result.registerError('ObjectId may only contain 0-9, a-z', val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaObjectId { }\n}\n","\nimport {Itsa, ItsaPredicate} from './itsa';\n\nfunction getOpenApiTypeForValue(val: any) {\n  if (typeof val === 'string') return 'string';\n  if (typeof val === 'number') return (val % 1 === 0) ? 'integer' : 'number';\n  if (typeof val === 'boolean') return 'boolean';\n  if (val === null || val === undefined) return 'null'; // Note: OpenAPI 3.1 supports 'null', but 3.0 does not.\n  if (Array.isArray(val)) return 'array';\n  if (typeof val === 'object') return 'object';\n}\n\nexport interface ItsaSchemaSettings {\n  description?: string;\n  example?: any;\n  default?: any;\n  title?: any;\n  _defaults?: Omit<ItsaSchemaSettings, '_defaults'>;\n}\n\nexport interface IToOpenApiSchemaParams {\n  toRef?(schema:any):string | null | undefined;\n  isRoot?: boolean;\n}\n\nclass ItsaOpenApiSchema {\n\n  schema(this: Itsa, settings: ItsaSchemaSettings): Itsa {\n    this.predicates.push({ id: 'schema', settings });\n    return this;\n  }\n\n  toOpenApiSchema<X>(this:Itsa, params?:IToOpenApiSchemaParams):any {\n    if (!params) { params = {}; }\n    if (!('isRoot' in params)) params.isRoot = true;\n\n    const lookup = {} as Record<string, ItsaPredicate>;\n    const predicates = this.predicates;\n    for (const p of predicates) { lookup[p.id] = p; }\n\n    const schema:any = (() => {\n      if (lookup['object']) {\n        const properties = {} as any;\n        const required = [];\n        for (const key of this.keys()) {\n          const keySchema = this.get(key);\n          if (keySchema.isRequired()) required.push(key);\n          properties[key] = keySchema.toOpenApiSchema({ ...params, isRoot: false });\n        }\n        return {\n          type: 'object',\n          required,\n          properties,\n        };\n      }\n\n      if (lookup['array']) {\n        const example = lookup['array'].settings?.example;\n        return {\n          type: 'array',\n          ...(example ? { items: example.toOpenApiSchema({ ...params, isRoot: false }) } : {}),\n        };\n      }\n\n      if (lookup['string'] || lookup['email']) {\n        const s = { type: 'string' } as any;\n        if (lookup['email']) s.format = 'email';\n        if (lookup['matches']) {\n          const rx = lookup['matches'].settings?.regex;\n          const match = rx.toString().match(/^\\/(.*?)\\/([gimyus]*)$/);\n          if (match) { s.pattern = match[1]; }\n        }\n        return s;\n      }\n\n      if (lookup['number']) {\n        return { type: 'number' };\n      }\n\n      if (lookup['integer']) {\n        return { type: 'integer' };\n      }\n\n      if (lookup['boolean']) {\n        return { type: 'boolean' };\n      }\n\n      if (lookup['null']) {\n        return { type: 'null' };\n      }\n\n      if (lookup['objectid']) {\n        return { type: 'string', minLength: 24, maxLength: 24, pattern: '^[0-9a-f]$' };\n      }\n\n      if (lookup['date']) {\n        return { type: 'date', format: 'date-time' };\n      }\n\n      if (lookup['equal']) {\n        const val = lookup['equal'].settings.example;\n        const type = getOpenApiTypeForValue(val);\n        return { type, const: val };\n      }\n\n      if (lookup['any']) {\n        const anyPredicateSchemas:Itsa[] = lookup['any']?.settings?.schemas || [];\n        if (anyPredicateSchemas.length === 1) {\n          return anyPredicateSchemas[0].toOpenApiSchema({ ...params, isRoot: false });\n        }else if (anyPredicateSchemas.length > 1) {\n          const subSchemas = anyPredicateSchemas.map(s => s.toOpenApiSchema({ ...params, isRoot: false }));\n          const type = subSchemas[0].type;\n          const allSame = !subSchemas.find(ss => ss.type !== type);\n          const allConst = !subSchemas.find(ss => !('const' in ss));\n          const isEnum = allSame && allConst && ['string', 'number', 'integer'].includes(type);\n          if (isEnum) {\n            return { type, enum: subSchemas.map(ss => ss.const) };\n          }else{\n            return { oneOf: anyPredicateSchemas.map(s => s.toOpenApiSchema({ ...params, isRoot: false })) };\n          }\n        }\n      }\n\n      if (lookup['anything']) {\n        return null;\n      }\n    })();\n\n    if (!schema) return schema;\n\n    // Now apply modifiers\n    if (lookup['notEmpty']) schema.minLength = 1;\n    if (lookup['length']) {\n      const { exactly, min, max } = (lookup['length']?.settings || {});\n      if (typeof min === \"number\") {\n        schema.minLength = min;\n      }\n      if (typeof max === \"number\") {\n        schema.maxLength = max;\n      }\n      if (typeof exactly === \"number\") {\n        schema.minLength = exactly;\n        schema.maxLength = exactly;\n      }\n    }\n\n    if (lookup['between']) {\n      const { min, max } = lookup['between'].settings;\n      const inclusive = lookup['between'].settings.inclusive ?? true;\n      if (inclusive) {\n        schema.minimum = min;\n        schema.maximum = max;\n      }else{\n        schema.exclusiveMinimum = min;\n        schema.exclusiveMaximum = max;\n      }\n    }\n    if (lookup['min']) {\n      const min = lookup['min'].settings.min;\n      const inclusive = lookup['min'].settings.inclusive ?? true;\n      if (inclusive) {\n        schema.minimum = min;\n      }else{\n        schema.exclusiveMinimum = min;\n      }\n    }\n    if (lookup['max']) {\n      const max = lookup['max'].settings.max;\n      const inclusive = lookup['max'].settings.inclusive ?? true;\n      if (inclusive) {\n        schema.maximum = max;\n      }else{\n        schema.exclusiveMaximum = max;\n      }\n    }\n    if (lookup['equal']) {\n      schema.const = lookup['equal'].settings.example;\n    }\n\n    // Now apply meta\n    for (const p of predicates) {\n      if (p.id !== 'schema') continue;\n      if (!p.settings) continue;\n      for (const key of Object.keys(p.settings)) {\n        if (key === '_defaults') continue;\n        schema[key] = p.settings[key];\n      }\n      if (!p.settings._defaults) continue;\n      for (const key of Object.keys(p.settings._defaults)) {\n        if (key === '_defaults') continue;\n        const hasValue = ![null, undefined].includes(schema[key]);\n        if (hasValue) continue;\n        schema[key] = p.settings._defaults[key];\n      }\n    }\n\n    const $ref = params.toRef?.(schema);\n    if ($ref && !params.isRoot) {\n      return { $ref };\n    }\n\n    return schema;\n  }\n}\n\nItsa.extend(ItsaOpenApiSchema);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaOpenApiSchema { }\n}\n","\nimport { Itsa } from \"./itsa\";\n\nexport class ItsaOptional {\n  isRequired(this: Itsa): boolean {\n    return !this._isOptional;\n  }\n  optional(this:Itsa, schema?: Itsa):Itsa{\n    this._isOptional = true;\n\n    if (schema) {\n      for (const p of schema.predicates) {\n        this.predicates.push(p);\n      }\n    }\n\n    return this;\n  }\n}\n\nItsa.extend(ItsaOptional);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaOptional { }\n}\n","\nimport {Itsa} from \"./itsa\";\nimport { ItsaObjectSettings } from './object';\n\nconst forEachValue = (obj, handler) => {\n  Object.keys(obj).forEach(key => {\n    const val = obj[key];\n    handler(val);\n    if (val && typeof val === 'object') {\n      forEachValue(val, handler);\n    }\n  })\n};\n\nconst partialize = (schema:Itsa, fields?:string[]):void => {\n  for (const p of schema.predicates) {\n    if (p.id === 'object') {\n      const settings:ItsaObjectSettings = p.settings;\n      if (fields) {\n        for (const field of fields) {\n          const [key, ...restOfKeys] = field.split('.');\n          const ex:Itsa = settings.example[key];\n          if (!ex) {\n            continue;\n          }else if (restOfKeys.length) {\n            partialize(ex, [restOfKeys.join('.')]);\n          }else{\n            ex._isOptional = true;\n          }\n        }\n      }else{\n        settings.config.partial = true;\n      }\n    }\n\n    if (!fields){\n      forEachValue(p, (val) => {\n        if (val instanceof Itsa) {\n          partialize(val);\n        }\n      });\n    }\n  }\n};\n\nexport class ItsaPartialed {\n  partialed(this:Itsa, fields?:string[]):Itsa{\n    const schema = this.clone();\n    partialize(schema, fields);\n    return schema as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaPartialed);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaPartialed { }\n}\n","\nimport {Itsa, ItsaPredicate} from \"./itsa\";\n\nexport type RawItsa = {_isOptional: boolean, predicates:ItsaPredicate[]};\n\nconst convert = (el:any) => {\n  const proto = Object.prototype.toString.call(el);\n  const isObject = `[object Object]` === proto;\n  const isArray = `[object Array]` === proto;\n  if (!isObject && !isArray) {\n    return el;\n  }\n\n  // replace sub-schemas: depth first\n  for (const key in el) {\n    el[key] = convert(el[key]);\n  }\n\n  if (isObject && el.predicates) {\n    const i = new Itsa();\n    i.predicates = el.predicates;\n    return i;\n  }\n\n  return el;\n}\n\nexport class ItsaSerialize {\n  load(this:Itsa, raw:RawItsa):Itsa{\n    this.predicates = convert(raw).predicates;\n    return this as any as Itsa;\n  }\n  toJSON(this:Itsa):RawItsa {\n    return {\n      _isOptional: this._isOptional,\n      predicates: this.predicates,\n    };\n  }\n  toRaw(this:Itsa):RawItsa {\n    return this.toJSON();\n  }\n}\n\nItsa.extend(ItsaSerialize);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaSerialize { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaString {\n  string(this:Itsa):Itsa{\n    this.predicates.push({ id: 'string', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaString, {\n  id: 'string',\n  validate: (context:ItsaValidateContext) => {\n    const { type, result, val } = context;\n    if (type !== 'string') return result.registerError(`Expected string`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaString { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaToIntSettings {\n  radix?:number;\n}\n\nexport class ItsaTo {\n  toDate(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toDate', settings:null });\n    return this as any as Itsa;\n  }\n  toFloat(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toFloat', settings:null });\n    return this as any as Itsa;\n  }\n  toInt(this:Itsa, radix?:number):Itsa{\n    const settings:ItsaToIntSettings = { radix };\n    this.predicates.push({ id: 'toInt', settings });\n    return this as any as Itsa;\n  }\n  toLowerCase(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toLowerCase' });\n    return this as any as Itsa;\n  }\n  toUpperCase(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toUpperCase' });\n    return this as any as Itsa;\n  }\n  toNow(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toNow' });\n    return this as any as Itsa;\n  }\n  toString(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toString' });\n    return this as any as Itsa;\n  }\n  toTrimmed(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toTrimmed' });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(\n  ItsaTo,\n  {\n    id: 'toDate',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal, result } = context;\n      const date = new Date(val);\n      if (!isFinite(date.getTime())) return result.registerError(`Date conversion failed`, val);\n      setVal(date);\n    }\n  },\n  {\n    id: 'toFloat',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal, result } = context;\n      const newFloat = parseFloat(val);\n      if (isNaN(newFloat)) return result.registerError(`Float conversion failed`, val);\n      setVal(newFloat);\n    }\n  },\n  {\n    id: 'toInt',\n    validate: (context:ItsaValidateContext, settings:ItsaToIntSettings) => {\n      const { val, setVal, result } = context;\n      const { radix } = settings;\n      const newInt = parseInt(val, radix ?? 10);\n      if (isNaN(newInt)) return result.registerError(`Int conversion failed`, val);\n      setVal(newInt);\n    }\n  },\n  {\n    id: 'toLowerCase',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal } = context;\n      setVal(String(val).toLowerCase());\n    }\n  },\n  {\n    id: 'toUpperCase',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal } = context;\n      setVal(String(val).toUpperCase());\n    }\n  },\n  {\n    id: 'toNow',\n    validate: (context:ItsaValidateContext) => {\n      const { setVal } = context;\n      setVal(new Date());\n    }\n  },\n  {\n    id: 'toString',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal } = context;\n      setVal(String(val));\n    }\n  },\n  {\n    id: 'toTrimmed',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal } = context;\n      setVal(String(val).trim());\n    }\n  },\n);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaTo { }\n}\n","\nimport { Itsa } from './itsa';\nimport { ItsaObjectSettings } from './object';\n\nclass ItsaTouch {\n  touch<X>(this:Itsa, obj:X, toucher?:(string, X) => void):X {\n    const objectPredicates = this.predicates.filter(p => p?.id === 'object');\n    if (!objectPredicates.length) throw new Error(`This is not an object schema.`);\n    if (!obj) return obj;\n    for (const predicate of objectPredicates) {\n      const settings = predicate.settings as ItsaObjectSettings;\n      const example = settings.example as any;\n      if (!example) return obj;\n      const keys = Object.keys(example);\n      for (const key of keys) {\n        if (!(key in obj)) {\n          if (toucher) {\n            toucher(key, obj);\n          }else{\n            obj[key] = undefined;\n          }\n        }\n      }\n    }\n    return obj;\n  }\n\n  keys(this:Itsa):string[] {\n    const touched = this.touch({});\n    return Object.keys(touched);\n  }\n\n  pick<TObj>(this:Itsa, source:TObj):Partial<TObj> {\n    const obj = {};\n    for (const k of this.keys()) {\n      if (k in source) {\n        obj[k] = source[k];\n      }\n    }\n    return obj;\n  }\n}\n\nItsa.extend(ItsaTouch);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaTouch { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaTruthy {\n  truthy(this:Itsa):Itsa{\n    this.predicates.push({ id: 'truthy', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaTruthy, {\n  id: 'truthy',\n  validate: (context:ItsaValidateContext) => {\n    const { val, result } = context;\n    if (!val) return result.registerError(`Expected truthy value.`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaTruthy { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaTypeOfSettings {\n  type: string;\n}\n\nexport class ItsaTypeOf {\n  typeof(this:Itsa, type:string):Itsa{\n    const settings: ItsaTypeOfSettings = { type };\n    this.predicates.push({ id: 'typeof', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaTypeOf, {\n  id: 'typeof',\n  validate: (context:ItsaValidateContext, settings: ItsaTypeOfSettings) => {\n    const { val, result } = context;\n    const { type } = settings;\n    const actualType = typeof val;\n    if (type !== actualType) {\n      result.registerError(`Expected ${type}`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaTypeOf { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaUniqueSettings {\n  getter?: Function;\n}\n\nexport class ItsaUnique {\n  unique(this:Itsa, getter?:Function):Itsa{\n    const settings: ItsaUniqueSettings = { getter };\n    this.predicates.push({ id: 'unique', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaUnique, {\n  id: 'unique',\n  validate: (context:ItsaValidateContext, settings: ItsaUniqueSettings) => {\n    const { val, result } = context;\n    const { getter } = settings;\n    const set = new Set();\n    for (const key in val) {\n      let subVal = val[key];\n      if (getter) subVal = getter(subVal);\n      if (set.has(subVal)) {\n        return result.registerError(`${subVal} occurred multiple times`, val);\n      }\n      set.add(subVal);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaUnique { }\n}\n","\nimport {\n  Itsa,\n  ItsaValidator,\n  ItsaValidateContext,\n  ItsaInternalValidationSettings,\n  ItsaValidationResult,\n  ItsaValidationSettings,\n  ItsaValidationResultBuilder\n} from './itsa';\n\nclass ItsaValidation {\n  _validate(this:Itsa, settings:ItsaInternalValidationSettings):ItsaValidationResultBuilder {\n    const { key } = settings;\n    const result = new ItsaValidationResultBuilder(settings.settings.exhaustive, key, settings.path, settings.settings.hint);\n    result.value = settings.val;\n\n    if (this._isOptional) {\n      if ([null, undefined].includes(result.value)) return result;\n      const isFalsy = !result.value;\n      if (isFalsy) {\n        const type = typeof result.value;\n        const allowedTypes = this.predicates.map(p => {\n          if (p.id === 'string') return 'string';\n          if (p.id === 'email') return 'string';\n          if (p.id === 'number') return 'number';\n          if (p.id === 'integer') return 'integer';\n          if (p.id === 'boolean') return 'boolean';\n        }).filter(t => t);\n        const isAllowedType = allowedTypes.includes(type as any);\n        if (isAllowedType) {\n          return result;\n        }\n      }\n    }\n    try {\n      const setVal = (newVal:any) => {\n        if (settings.parent) {\n          settings.parent[settings.key] = newVal;\n          settings.val = newVal;\n        }else{\n          result.value = newVal;\n        }\n      };\n      for (const predicate of this.predicates) {\n        const validator:ItsaValidator = Itsa.validators[predicate.id];\n\n        /* istanbul ignore next */\n        if (!validator) throw new Error(`Validator not found: ${predicate.id}`);\n\n        const context:ItsaValidateContext = {\n          setVal,\n          result: result.withMessageFormat(predicate.settings?._message),\n          val: settings.val,\n          key: settings.key,\n          parent: settings.parent,\n          exists: settings.exists,\n          type: typeof settings.val,\n          validation: settings.settings,\n          path: settings.path,\n        };\n        validator.validate(context, predicate.settings);\n        if (!result.ok) return result;\n      }\n    }catch (e){\n      /* istanbul ignore next */\n      if (e !== 'STOP_ON_FIRST_ERROR') throw e;\n    }\n    return result;\n  }\n\n  validate(this:Itsa, val: any, settings:ItsaValidationSettings = {}):ItsaValidationResult {\n    return this._validate({\n      val,\n      settings,\n      key:null,\n      parent:null,\n      exists: true,\n      path: [],\n    });\n  }\n\n  validOrThrow(this:Itsa, val:any, settings?:ItsaValidationSettings) {\n    this.validate(val, settings).okOrThrow();\n  }\n}\n\nItsa.extend(ItsaValidation);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaValidation { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport declare type ItsaVerifyFunction = (val:any, context:ItsaValidateContext) => boolean | string | any;\n\ninterface ItsaVerifySettings {\n  verifier: ItsaVerifyFunction;\n}\n\nexport class ItsaVerify {\n  verify(this:Itsa, verifier:ItsaVerifyFunction):Itsa{\n    const settings: ItsaVerifySettings = { verifier };\n    this.predicates.push({ id: 'verify', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaVerify, {\n  id: 'verify',\n  validate: (context:ItsaValidateContext, settings: ItsaVerifySettings) => {\n    const { val, result } = context;\n    const { verifier } = settings;\n    try {\n      const response = verifier(val, context);\n      if (typeof response === 'boolean') {\n        if (response === false) {\n          result.registerError(`Value is invalid`, val);\n        }\n        return;\n      }\n      if (typeof response === 'string') {\n        return result.registerError(response, val);\n      }\n    }catch(e){\n      if (e === 'STOP_ON_FIRST_ERROR') throw e;\n      return result.registerError(e, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaVerify { }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(589);\n"],"sourceRoot":""}