{"version":3,"sources":["webpack://ItsaLib/webpack/universalModuleDefinition","webpack://ItsaLib/./src/all.ts","webpack://ItsaLib/./src/and.ts","webpack://ItsaLib/./src/any.ts","webpack://ItsaLib/./src/anything.ts","webpack://ItsaLib/./src/array.ts","webpack://ItsaLib/./src/between.ts","webpack://ItsaLib/./src/boolean.ts","webpack://ItsaLib/./src/build.ts","webpack://ItsaLib/./src/clone.ts","webpack://ItsaLib/./src/constructor.ts","webpack://ItsaLib/./src/convert.ts","webpack://ItsaLib/./src/date.ts","webpack://ItsaLib/./src/decorators.ts","webpack://ItsaLib/./src/default.ts","webpack://ItsaLib/./src/email.ts","webpack://ItsaLib/./src/equal.ts","webpack://ItsaLib/./src/extend.ts","webpack://ItsaLib/./src/falsy.ts","webpack://ItsaLib/./src/function.ts","webpack://ItsaLib/./src/get.ts","webpack://ItsaLib/./src/helpers.ts","webpack://ItsaLib/./src/instanceof.ts","webpack://ItsaLib/./src/integer.ts","webpack://ItsaLib/./src/itsa.ts","webpack://ItsaLib/./src/length.ts","webpack://ItsaLib/./src/matches.ts","webpack://ItsaLib/./src/max.ts","webpack://ItsaLib/./src/message.ts","webpack://ItsaLib/./src/min.ts","webpack://ItsaLib/./src/not-empty.ts","webpack://ItsaLib/./src/null.ts","webpack://ItsaLib/./src/number.ts","webpack://ItsaLib/./src/object.ts","webpack://ItsaLib/./src/objectid.ts","webpack://ItsaLib/./src/optional.ts","webpack://ItsaLib/./src/serialize.ts","webpack://ItsaLib/./src/string.ts","webpack://ItsaLib/./src/to.ts","webpack://ItsaLib/./src/touch.ts","webpack://ItsaLib/./src/truthy.ts","webpack://ItsaLib/./src/typeof.ts","webpack://ItsaLib/./src/unique.ts","webpack://ItsaLib/./src/validate.ts","webpack://ItsaLib/./src/verify.ts","webpack://ItsaLib/webpack/bootstrap","webpack://ItsaLib/webpack/startup"],"names":["root","factory","exports","module","define","amd","this","ItsaAll","options","schemas","flat","map","x","primitiveToItsa","schema","predicates","p","push","Itsa","extend","ItsaAnd","ItsaAny","settings","id","validate","context","key","val","parent","validation","exists","result","length","truthyErrors","subSchema","isSchemaTruthy","find","includes","subResult","_validate","path","ok","message","registerError","ItsaAnything","ItsaArray","example","builder","type","Array","isArray","subVal","registerResult","ItsaBetween","min","max","extraSettings","inclusive","ItsaBoolean","ItsaBuild","overrides","obj","predicate","validator","validators","Object","assign","ItsaClone","raw","JSON","parse","stringify","itsa","load","ItsaConstructor","cls","constructor","ItsaConvert","converter","setVal","e","ItsaDate","prototype","toString","call","isFinite","build","target","source","keys","addProperty","combineSchemas","object","getOwnPropertyDescriptor","parentSchema","clone","ItsaDefault","falsy","Date","rx","ItsaEmail","test","ItsaEqual","strict","ItsaExtend","extendor","ItsaFalsy","ItsaFunction","ItsaGet","any","ex","and","constructorIs","equal","ItsaInstanceOf","ItsaInteger","isNaN","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","indexOf","ItsaValidationException","errors","join","Error","ItsaValidationResult","error","err","ItsaValidationResultBuilder","exhaustive","hint","value","undefined","pathStr","messageFormat","msgDataSegments","replace","split","addError","addResult","getOwnPropertyNames","filter","m","it","ItsaLength","exactly","len","ItsaMatches","regex","String","ItsaMax","msg","_message","ItsaMin","ItsaNotEmpty","hasFields","hasOwnProperty","ItsaNull","ItsaNumber","ItsaObject","config","convertedExample","i","pred","schemaForKey","extras","RegExp","objectKeys","exampleKeys","partial","extraKeys","k","rxObjectId","ItsaObjectId","ItsaOptional","allowedSchema","convert","el","proto","isObject","ItsaSerialize","ItsaString","ItsaTo","radix","date","getTime","newFloat","parseFloat","newInt","parseInt","toLowerCase","toUpperCase","trim","ItsaTouch","toucher","objectPredicates","ItsaTruthy","ItsaTypeOf","ItsaUnique","getter","set","Set","has","add","ItsaValidation","newVal","withMessageFormat","okOrThrow","ItsaVerify","verifier","response","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"mappings":"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","file":"itsa.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ItsaLib\"] = factory();\n\telse\n\t\troot[\"ItsaLib\"] = factory();\n})(this, function() {\nreturn ","import {Itsa} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\n\nclass ItsaAll {\n  all (this:Itsa, ...options:(ItsaOrPrimative | ItsaOrPrimative[])[]):Itsa {\n    const schemas = options.flat().map(x => primitiveToItsa(x)) as Itsa[];\n    for (const schema of schemas) {\n      for (const p of schema.predicates) {\n        this.predicates.push(p);\n      }\n    }\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaAll);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaAll { }\n}\n","import {Itsa} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\n\nexport class ItsaAnd {\n  and (this:Itsa, ...options:(ItsaOrPrimative | ItsaOrPrimative[])[]):Itsa {\n    const schemas = options.flat().map(x => primitiveToItsa(x)) as Itsa[];\n    for (const schema of schemas) {\n      for (const p of schema.predicates) {\n        this.predicates.push(p);\n      }\n    }\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaAnd);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaAnd { }\n}\n","import {ItsaValidateContext, Itsa, ItsaValidator} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\n\ninterface ItsaAnySettings {\n  schemas: Itsa[];\n}\n\nclass ItsaAny {\n  any (this:Itsa, ...options:(ItsaOrPrimative | ItsaOrPrimative[])[]):Itsa {\n    const schemas = options.flat().map(x => primitiveToItsa(x)) as Itsa[];\n    const settings:ItsaAnySettings = { schemas };\n    this.predicates.push({ id: 'any', settings });\n    return this as any as Itsa;\n  }\n}\n\nconst validate:ItsaValidator = {\n  id: 'any',\n  validate: (context:ItsaValidateContext, settings:ItsaAnySettings) => {\n    const { key, val, parent, validation, exists, result } = context;\n    const { schemas } = settings;\n\n    if (schemas.length === 0)\n      return;\n\n    const truthyErrors = [];\n    for (const subSchema of schemas) {\n      const isSchemaTruthy = subSchema.predicates.find(p => !['equal', 'falsy'].includes(p.id));\n\n      const subResult = subSchema._validate({\n        key,\n        parent,\n        val,\n        exists,\n        settings: validation,\n        path: context.path,\n      });\n      if (subResult.ok) {\n        return;\n      }else if (isSchemaTruthy) {\n        truthyErrors.push(subResult.message);\n      }\n    }\n\n    if (truthyErrors.length === 1) {\n      result.registerError(truthyErrors[0], val);\n    }else{\n      result.registerError(`No schemas matched.`, val);\n    }\n  }\n};\n\nItsa.extend(ItsaAny, validate);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaAny { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaAnything {\n  anything(this:Itsa):Itsa {\n    this.predicates.push({ id: 'anything', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaAnything, {\n  id: 'anything',\n  validate: (context:ItsaValidateContext) => {\n\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaAnything { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\nimport { ItsaObjectSettings } from './object';\n\ninterface ItsaArraySettings {\n  example?: Itsa;\n}\n\nexport class ItsaArray {\n  array(this:Itsa, example?:ItsaOrPrimative):Itsa {\n    const settings:ItsaArraySettings = { example: example ? primitiveToItsa(example) : null };\n    this.predicates.push({ id: 'array', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaArray, {\n  id: 'array',\n  builder(settings: ItsaArraySettings) {\n    return [];\n  },\n  validate: (context:ItsaValidateContext, settings:ItsaArraySettings) => {\n    const { val, validation, exists, result, type } = context;\n    const { example } = settings;\n\n    if (!Array.isArray(val)) return result.registerError(`Expected array but found ${type}`, val);\n\n    if (!example) return;\n    if (!val.length) return;\n\n    for (let key=0; key < val.length; key++) {\n      const subVal = val[key];\n      const subResult = example._validate({\n        key,\n        parent: val,\n        val:subVal,\n        exists,\n        settings: validation,\n        path: [...context.path, key],\n      });\n      result.registerResult(subResult);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaArray { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport interface ItsaBetweenExtraSettings {\n  inclusive?:boolean;\n}\n\nexport interface ItsaBetweenSettings extends ItsaBetweenExtraSettings {\n  min:any;\n  max:any;\n  inclusive?:boolean;\n}\n\nexport class ItsaBetween {\n  between(this:Itsa, min:any, max:any, extraSettings:ItsaBetweenExtraSettings = {}):Itsa{\n    const settings = extraSettings as ItsaBetweenSettings;\n    settings.min = min;\n    settings.max = max;\n    this.predicates.push({ id: 'between', settings:settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaBetween, {\n  id: 'between',\n  validate: (context:ItsaValidateContext, settings:ItsaBetweenSettings) => {\n    const { val, result } = context;\n    const { min, max } = settings;\n    const inclusive = settings.inclusive ?? true;\n    const isTooLow = inclusive ? (val < min) : (val <= min);\n    if (isTooLow) result.registerError(`Value cannot be under ${min}`, val);\n    const isTooHigh = inclusive ? (val > max) : (val >= max);\n    if (isTooHigh) result.registerError(`Value cannot be above ${max}`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaBetween { }\n}\n","\nimport { ItsaValidateContext } from \"./itsa\";\nimport { Itsa } from \"./itsa\";\n\nexport class ItsaBoolean {\n  boolean(this:Itsa):Itsa{\n    this.predicates.push({ id: 'boolean', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaBoolean, {\n  id: 'boolean',\n  validate: (context:ItsaValidateContext) => {\n    const { type, result, val } = context;\n    if (type !== 'boolean') result.registerError(`Expected bool but found ${type}`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaBoolean { }\n}\n","\nimport { Itsa, ItsaValidator } from './itsa';\n\nfunction build<T>(schema:Itsa):T {\n  for (const predicate of schema.predicates) {\n    const validator: ItsaValidator = Itsa.validators[predicate.id];\n    if (validator.builder) return validator.builder(predicate.settings);\n  }\n};\n\nclass ItsaBuild {\n  build<X>(this:Itsa, overrides?:X):any {\n    const obj = build<X>(this) as any;\n    if (obj && typeof obj === 'object' && overrides && typeof overrides === 'object') {\n      Object.assign(obj, overrides);\n    }\n    return obj;\n  }\n}\n\nItsa.extend(ItsaBuild);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaBuild { }\n}\n","\nimport {itsa, Itsa} from \"./itsa\";\n\nexport class ItsaClone {\n  clone(this:Itsa):Itsa{\n    const raw = JSON.parse(JSON.stringify(this));\n    return itsa.load(raw);\n  }\n}\n\nItsa.extend(ItsaClone);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaClone { }\n}\n","\nimport { ItsaValidateContext } from \"./itsa\";\nimport { Itsa } from \"./itsa\";\n\nexport interface ItsaConstructorSettings {\n  cls:Function;\n}\n\nexport class ItsaConstructor {\n  constructorIs(this:Itsa, cls:Function):Itsa{\n    const settings: ItsaConstructorSettings = { cls };\n    this.predicates.push({ id: 'constructor', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaConstructor, {\n  id: 'constructor',\n  validate: (context:ItsaValidateContext, settings: ItsaConstructorSettings) => {\n    const { val, result } = context;\n    const isMatch = val !== null && val !== undefined && val.constructor === settings.cls;\n    if (!isMatch) return result.registerError(`Expected to be ${settings.cls}`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaConstructor { }\n}\n","\nimport { Itsa, ItsaValidateContext } from \"./itsa\";\n\nexport interface ItsaConvertSettings {\n  converter:Function;\n}\n\nexport class ItsaConvert {\n  convert(this:Itsa, converter:Function):Itsa{\n    const settings: ItsaConvertSettings = { converter };\n    this.predicates.push({ id: 'convert', settings });\n    return this as any as Itsa;\n  }\n  to(this:Itsa, converter:Function):Itsa{\n    const settings: ItsaConvertSettings = { converter };\n    this.predicates.push({ id: 'convert', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaConvert, {\n  id: 'convert',\n  validate: (context:ItsaValidateContext, settings: ItsaConvertSettings) => {\n    const { val, setVal, result } = context;\n    const { converter } = settings;\n    if (typeof converter !== 'function') return;\n    try {\n      const newVal = converter(val);\n      setVal(newVal);\n    }catch(e){\n      result.registerError(e, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaConvert { }\n}\n\n","\nimport { ItsaValidateContext } from \"./itsa\";\nimport { Itsa } from \"./itsa\";\n\nexport class ItsaDate {\n  date(this:Itsa):Itsa{\n    this.predicates.push({ id: 'date', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaDate, {\n  id: 'date',\n  validate: (context:ItsaValidateContext) => {\n    const { val, result } = context;\n    const type = Object.prototype.toString.call(val);\n    if (type !== \"[object Date]\") {\n      return result.registerError(`Expected date but found ${type}`, val);\n    }\n    if (!isFinite(val)) {\n      result.registerError(`Date is not valid`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaDate { }\n}\n\n","\nimport { Itsa, itsa } from \"./itsa\";\nimport { ItsaObjectSettings } from './object';\n\nconst combineSchemas = (target:Itsa, source:Itsa) => {\n  for (const p of source.predicates) {\n    if (p.id === 'object') {\n      const settings = p.settings as ItsaObjectSettings;\n      if (settings.example) {\n        for (const key of Object.keys(settings.example)) {\n          target.addProperty(key, settings.example[key]);\n        }\n      }\n    }else{\n      target.predicates.push(p);\n    }\n  }\n};\n\nexport class ItsaSchema {\n  static schema: Itsa;\n  constructor(overrides?) {\n    const schema = (this as any).constructor.schema;\n    return schema.build(overrides);\n  }\n}\n\nexport function itsaSchema (schema?:Itsa) {\n  return function (target: any) {\n    if (target.schema && schema) {\n      combineSchemas(target.schema, schema);\n    }else if (schema) {\n      target.schema = schema;\n    }else if (target.schema) {\n      // nothing to do\n    }else{\n      target.schema = itsa.object({});\n    }\n  };\n}\n\nexport function itsaField (schema:Itsa) {\n  return function (target: any, key: string) {\n    const cls = target.constructor;\n    if (!Object.getOwnPropertyDescriptor(cls, 'schema')) {\n      const parentSchema = cls.schema;\n      cls.schema = parentSchema ? parentSchema.clone() : itsa.object({});\n    }\n    cls.schema.addProperty(key, schema);\n  };\n}\n","\nimport { Itsa, ItsaValidateContext } from \"./itsa\";\n\nexport interface ItsaDefaultSettings {\n  val?:any;\n  falsy?: boolean;\n}\n\nexport class ItsaDefault {\n  default(this:Itsa, val, settings:ItsaDefaultSettings = {}):Itsa{\n    settings.val = val;\n    this.predicates.push({ id: 'default', settings });\n    return this as any as Itsa;\n  }\n  defaultNow(this:Itsa):Itsa{\n    this.predicates.push({ id: 'defaultNow', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(\n  ItsaDefault,\n  ...[\n    {\n      id: 'default',\n      builder(settings:ItsaDefaultSettings) {\n        return settings.val;\n      },\n      validate: (context:ItsaValidateContext, settings:ItsaDefaultSettings) => {\n        const { val, setVal } = context;\n        const falsy = settings.falsy ?? false;\n        const doReplace = falsy ? !val : (val === null || val === undefined);\n        if (doReplace) {\n          setVal(settings.val);\n        }\n      }\n    },\n    {\n      id: 'defaultNow',\n      builder(settings:ItsaDefaultSettings) {\n        return new Date();\n      },\n      validate: (context:ItsaValidateContext) => {\n        const { val, setVal } = context;\n        if (val === null || val === undefined) {\n          setVal(new Date());\n        }\n      }\n    }\n  ]\n);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaDefault { }\n}\n\n","\nimport { Itsa, ItsaValidateContext } from \"./itsa\";\n\nconst rx = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\nexport class ItsaEmail {\n  email(this:Itsa):Itsa{\n    this.predicates.push({ id: 'email', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaEmail, {\n  id: 'email',\n  validate: (context:ItsaValidateContext) => {\n    const { val, type, result } = context;\n    if (type !== 'string') return result.registerError(`Expected email but found ${type}`, val);\n    const isValid = rx.test(val);\n    if (!isValid) {\n      result.registerError('Email address is invalid', val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaEmail { }\n}\n\n","\nimport { Itsa, ItsaValidateContext } from \"./itsa\";\n\nexport interface ItsaEqualSettings {\n  strict?:boolean;\n  example?:any;\n}\n\nexport class ItsaEqual {\n  equal(this:Itsa, val:any, settings:ItsaEqualSettings = {}):Itsa{\n    settings.example = val;\n    this.predicates.push({ id: 'equal', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaEqual, {\n  id: 'equal',\n  validate: (context:ItsaValidateContext, settings:ItsaEqualSettings) => {\n    const { val, result } = context;\n    const { example } = settings;\n    const strict = settings.strict ?? true;\n    const isEqual = strict ? (val === example) : (val == example);\n    if (!isEqual) {\n      result.registerError(`Did not equal ${example}`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaEqual { }\n}\n\n","\nimport { Itsa } from \"./itsa\";\n\nexport class ItsaExtend {\n  extend(this:Itsa, extendor:(itsa:Itsa) => void):Itsa{\n    extendor(this);\n    return this;\n  }\n}\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaExtend { }\n}\n\nItsa.extend(ItsaExtend);\n","\nimport { Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaFalsy {\n  falsy(this:Itsa):Itsa{\n    this.predicates.push({ id: 'falsy', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaFalsy, {\n  id: 'falsy',\n  validate: (context:ItsaValidateContext) => {\n    const { val, result } = context;\n    if (val) return result.registerError(`Expected falsy value.`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaFalsy { }\n}\n\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\n\ninterface ItsaFunctionSettings {\n  length?:Itsa;\n}\n\ninterface ItsaFunctionIncomingSettings {\n  length?:ItsaOrPrimative;\n}\n\nexport class ItsaFunction {\n  function(this:Itsa, settings:ItsaFunctionIncomingSettings = {}):Itsa{\n    if (settings.length) settings.length = primitiveToItsa(settings.length);\n    this.predicates.push({ id: 'function', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaFunction, {\n  id: 'function',\n  validate: (context:ItsaValidateContext, settings:ItsaFunctionSettings) => {\n    const { val, type, result } = context;\n    if (type !== 'function') return result.registerError('Expected function', val);\n    if (settings.length) {\n      const subResult = settings.length._validate({\n        key: 'length',\n        parent: null,\n        val: val.length,\n        exists: true,\n        settings: context.validation,\n        path: context.path,\n      });\n      result.registerResult(subResult);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaFunction { }\n}\n\n","\nimport { Itsa, itsa } from \"./itsa\";\nimport { ItsaObjectSettings } from './object';\n\nexport class ItsaGet {\n  get(this:Itsa, key:string):Itsa{\n    const schema = itsa.any();\n    for (const p of this.predicates) {\n      if (p.id === 'object') {\n        const settings = p.settings as ItsaObjectSettings;\n        if (settings.example && settings.example[key]) {\n          const ex = settings.example[key];\n          schema.and(ex);\n        }\n      }\n    }\n    return schema;\n  }\n}\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaGet { }\n}\n\nItsa.extend(ItsaGet);\n","\nimport {itsa, Itsa} from \"./itsa\";\n\nexport declare type ItsaOrPrimative = Itsa | number | string | boolean | null | undefined | Function;\n\nexport function primitiveToItsa (val:ItsaOrPrimative):Itsa {\n  if (val instanceof Itsa) {\n    return val;\n  }else if (typeof val === 'function') {\n    return itsa.constructorIs(val);\n  }else {\n    return itsa.equal(val);\n  }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaInstanceOfSettings {\n  cls: any;\n}\n\nexport class ItsaInstanceOf {\n  instanceof(this: Itsa, cls:any):Itsa {\n    const settings:ItsaInstanceOfSettings = { cls };\n    this.predicates.push({ id: 'instanceof', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaInstanceOf, {\n  id: 'instanceof',\n  validate: (context: ItsaValidateContext, settings:ItsaInstanceOfSettings) => {\n    const {val, result} = context;\n    const isInstance = val instanceof settings.cls;\n    if (!isInstance) {\n      result.registerError(`Expected instance of ${settings.cls}`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaInstanceOf { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaInteger {\n  integer(this:Itsa):Itsa {\n    this.predicates.push({ id: 'integer', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaInteger, {\n  id: 'integer',\n  validate: (context: ItsaValidateContext) => {\n    const {val, result} = context;\n    const valid = typeof val === \"number\"\n      && isNaN(val) === false\n      && [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY].indexOf(val) === -1\n      && val % 1 === 0;\n    if (!valid) {\n      result.registerError('Invalid integer', val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaInteger { }\n}\n","import { ItsaDefaultSettings } from './default';\n\nexport interface ItsaInternalValidationSettings {\n  val:any;\n  key?:string|number;\n  path:(string|number)[];\n  parent?:object|[];\n  exists: boolean;\n  settings:ItsaValidationSettings;\n}\n\nexport interface ItsaValidationSettings {\n  partial?:boolean;\n  exhaustive?:boolean;\n  hint?:string;\n}\n\nexport interface ItsaError {\n  message:string;\n  key:string | number;\n  path:(string | number)[];\n}\n\nexport class ItsaValidationException extends Error {\n  message: string;\n  result: ItsaValidationResult;\n\n  constructor(result:ItsaValidationResult) {\n    super();\n    const path = result.errors[0].path.join('.');\n    this.message = `${path ? `${path}: ` : ''}${result.errors[0].message}`;\n    this.result = result;\n  }\n}\n\nexport class ItsaValidationResult {\n  ok: boolean = true;\n  errors: ItsaError[] = [];\n  value: any;\n  message?: string;\n\n  okOrThrow(){\n    if (!this.ok) throw new ItsaValidationException(this);\n  }\n\n  addError(error:ItsaError) {\n    this.ok = false;\n    this.message = error.message;\n    this.errors.push(error);\n  }\n\n  addResult(result: ItsaValidationResult) {\n    if (!result.ok) this.ok = false;\n    for (const e of result.errors) {\n      this.errors.push(e);\n    }\n    if (!this.message && this.errors.length) {\n      const err = this.errors[0];\n      this.message = err.message;\n      // if (err.path && err.path.length) {\n      //   this.message += ` (${(err.path||[]).join('.')})`;\n      // }\n    }\n  }\n}\n\nexport class ItsaValidationResultBuilder extends ItsaValidationResult {\n  ok = true;\n  errors = [];\n  value = undefined;\n  hint? = undefined;\n  message? = undefined;\n\n  private readonly exhaustive: boolean;\n  private readonly key: string | number;\n  private readonly path: (string | number)[];\n  private messageFormat?: string;\n\n  constructor(exhaustive: boolean, key: string | number, path: (string | number)[], hint?: string) {\n    super();\n    this.key = key;\n    this.exhaustive = exhaustive;\n    this.path = path;\n    this.hint = hint;\n  }\n\n  registerError (message:string, val: any) {\n    message = this.hint ? `${this.hint}: ${message}` : message;\n    const result = new ItsaValidationResult();\n    const pathStr = this.path?.join?.(',');\n    if (this.messageFormat) {\n      message = this.messageFormat\n        .replace('{message}', message)\n        .replace('{msg}', message)\n        .replace('{path}', pathStr);\n\n      const msgDataSegments = message.split('{data}');\n      if (msgDataSegments.length > 1) {\n        message = msgDataSegments.join(JSON.stringify(val));\n      }\n    }else{\n      if (pathStr) {\n        message = `${pathStr}: ${message}`;\n      }\n    }\n    result.addError({ message, key: this.key, path: this.path });\n    this.addResult(result);\n  }\n\n  registerResult(result: ItsaValidationResult):void{\n    this.addResult(result);\n    if (!this.exhaustive && this.errors.length) {\n      throw 'STOP_ON_FIRST_ERROR';\n    }\n  }\n\n  withMessageFormat(messageFormat?: string):this {\n    this.messageFormat = messageFormat;\n    return this;\n  }\n}\n\nexport interface ItsaValidateContext {\n  parent?:object | [];\n  key?:string | number;\n  path:(string | number)[];\n  exists: boolean;\n  val:any;\n  type: string;\n  setVal:(val:any) => void;\n  validation: ItsaValidationSettings;\n  result: ItsaValidationResultBuilder;\n}\n\nexport interface ItsaPredicate {\n  id:string;\n  settings?:any;\n}\n\nexport interface ItsaValidator {\n  id:string;\n  validate:(ItsaValidateContext, any) => void;\n  builder?:(settings) => any;\n}\n\ntype ItsaSubclass = new (...args: any[]) => any;\n\nexport class Itsa {\n  predicates:ItsaPredicate[] = [];\n  static validators:{[key:string]:ItsaValidator} = {};\n\n  static extend(cls:ItsaSubclass, ...validators: ItsaValidator[]) {\n    for (const validator of validators) {\n      Itsa.validators[validator.id] = validator;\n    }\n\n    const keys = Object.getOwnPropertyNames(cls.prototype).filter(m => m !== 'constructor');\n    for (const key of keys) {\n      const val = cls.prototype[key];\n      Itsa.prototype[key] = val;\n\n      /* istanbul ignore next */\n      if (typeof val === 'function') {\n        itsa[key] = (...args) => {\n          const it = new Itsa();\n          return it[key](...args);\n        };\n      }\n    }\n  }\n}\n\nexport const itsa:Itsa = { predicates: [] } as Itsa;\n\nexport type { ItsaOrPrimative, primitiveToItsa } from './helpers';\n\nimport './all';\nimport './and';\nimport './any';\nimport './anything';\nimport './array';\nimport './between';\nimport './boolean';\nimport './build';\nimport './clone';\nimport './constructor';\nimport './convert';\nimport './date';\nimport './default';\nimport './email';\nimport './equal';\nimport './extend';\nimport './falsy';\nimport './function';\nimport './instanceof';\nimport './integer';\nimport './length';\nimport './matches';\nimport './max';\nimport './message';\nimport './min';\nimport './not-empty';\nimport './null';\nimport './number';\nimport './object';\nimport './objectid';\nimport './optional';\nimport './serialize';\nimport './string';\nimport './to';\nimport './touch';\nimport './truthy';\nimport './typeof';\nimport './unique';\nimport './validate';\nimport './verify';\nimport './get';\n\nexport * from './decorators';\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaLengthSettings {\n  exactly?:number;\n  min?:number;\n  max?:number;\n}\n\nexport class ItsaLength {\n  length(this: Itsa, min?:number, max?:number):Itsa {\n    let settings:ItsaLengthSettings = {\n      min, max\n    };\n    if (typeof min === 'number' && typeof max !== 'number') {\n      settings = { exactly: min };\n    }\n    if (typeof min !== 'number') {\n      settings = { min: 1 };\n    }\n    this.predicates.push({ id: 'length', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaLength, {\n  id: 'length',\n  validate: (context: ItsaValidateContext, settings:ItsaLengthSettings) => {\n    const {val, result} = context;\n    const len = val ? val.length : null;\n    if (typeof len !== 'number') {\n      return result.registerError('Invalid length', val);\n    }\n    if (typeof settings.exactly === 'number' && settings.exactly !== len) {\n      return result.registerError(`Expected length to be ${settings.exactly}`, val);\n    }\n    if (typeof settings.min === 'number' && settings.min > len) {\n      return result.registerError(`Expected length to be at least ${settings.min}`, val);\n    }\n    if (typeof settings.max === 'number' && settings.max < len) {\n      return result.registerError(`Expected length to be at most ${settings.max}`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaLength { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaMatchesSettings {\n  regex:RegExp;\n}\n\nexport class ItsaMatches {\n  matches(this: Itsa, regex:RegExp):Itsa {\n    const settings:ItsaMatchesSettings = { regex };\n    this.predicates.push({ id: 'matches', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaMatches, {\n  id: 'matches',\n  validate: (context: ItsaValidateContext, settings: ItsaMatchesSettings) => {\n    const {val, result} = context;\n    const valid = settings.regex.test(String(val));\n    if (!valid) {\n      result.registerError(`Does not match ${settings.regex}`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaMatches { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaMaxSettings {\n  max:any;\n  inclusive:boolean;\n}\n\nexport class ItsaMax {\n  max(this:Itsa, max:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? true;\n    const settings:ItsaMaxSettings = { max, inclusive };\n    this.predicates.push({ id: 'max', settings });\n    return this as any as Itsa;\n  }\n  under(this:Itsa, max:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? false;\n    const settings:ItsaMaxSettings = { max, inclusive };\n    this.predicates.push({ id: 'max', settings });\n    return this as any as Itsa;\n  }\n  below(this:Itsa, max:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? false;\n    const settings:ItsaMaxSettings = { max, inclusive };\n    this.predicates.push({ id: 'max', settings });\n    return this as any as Itsa;\n  }\n  atMost(this:Itsa, max:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? true;\n    const settings:ItsaMaxSettings = { max, inclusive };\n    this.predicates.push({ id: 'max', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaMax, {\n  id: 'max',\n  validate: (context: ItsaValidateContext, settings: ItsaMaxSettings) => {\n    const { val, result } = context;\n    const { max, inclusive } = settings;\n    if (inclusive) {\n      const ok = val <= max;\n      if (!ok) result.registerError(`Value must be at most ${max}`, val);\n    } else {\n      const ok = val < max;\n      if (!ok) result.registerError(`Value must be less than ${max}`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaMax { }\n}\n","import {Itsa} from \"./itsa\";\n\nItsa.prototype.message = Itsa.prototype.msg = function (this: Itsa, message: string):Itsa {\n  const predicate = this.predicates[this.predicates.length - 1];\n  predicate.settings = predicate.settings || {};\n  predicate.settings._message = message;\n  return this;\n};\n\ndeclare module './itsa' {\n  interface Itsa {\n    message(message:string):this;\n    msg(message:string):this;\n  }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaMinSettings {\n  min:any;\n  inclusive:boolean;\n}\n\nexport class ItsaMin {\n  min(this: Itsa, min:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? true;\n    const settings:ItsaMinSettings = { min, inclusive };\n    this.predicates.push({ id: 'min', settings });\n    return this as any as Itsa;\n  }\n  over(this: Itsa, min:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? false;\n    const settings:ItsaMinSettings = { min, inclusive };\n    this.predicates.push({ id: 'min', settings });\n    return this as any as Itsa;\n  }\n  above(this: Itsa, min:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? false;\n    const settings:ItsaMinSettings = { min, inclusive };\n    this.predicates.push({ id: 'min', settings });\n    return this as any as Itsa;\n  }\n  atLeast(this: Itsa, min:any, inclusive?:boolean):Itsa {\n    inclusive = inclusive ?? true;\n    const settings:ItsaMinSettings = { min, inclusive };\n    this.predicates.push({ id: 'min', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaMin, {\n  id: 'min',\n  validate: (context: ItsaValidateContext, settings: ItsaMinSettings) => {\n    const { val, result } = context;\n    const { min, inclusive } = settings;\n    if (inclusive) {\n      const ok = val >= min;\n      if (!ok) result.registerError(`Value must be at least ${min}`, val);\n    } else {\n      const ok = val > min;\n      if (!ok) result.registerError(`Value must be greater than ${min}`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaMin { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaNotEmpty {\n  notEmpty(this:Itsa):Itsa {\n    this.predicates.push({ id: 'notEmpty', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaNotEmpty, {\n  id: 'notEmpty',\n  validate: (context: ItsaValidateContext) => {\n    const { val, result } = context;\n    const len = val ? val.length : null;\n    if (typeof len === 'number' && len) {\n      return;\n    }\n\n    if (Object.prototype.toString.call(val) === \"[object Object]\") {\n      let hasFields = false;\n      for (const key in val) {\n        if (!val.hasOwnProperty(key)) { continue; }\n        hasFields = true;\n        break;\n      }\n      if (!hasFields) {\n        result.registerError(`Object cannot be empty`, val);\n      }\n      return;\n    }\n\n    result.registerError(`Value cannot be empty`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaNotEmpty { }\n}\n","import {Itsa} from \"./itsa\";\nimport {ItsaEqualSettings} from \"./equal\";\n\nexport class ItsaNull {\n  null(this:Itsa):Itsa {\n    const settings:ItsaEqualSettings = { example: null, strict: true };\n    this.predicates.push({ id: 'equal', settings });\n    return this as any as Itsa;\n  }\n  undef(this:Itsa):Itsa {\n    const settings:ItsaEqualSettings = { example: undefined, strict: true };\n    this.predicates.push({ id: 'equal', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaNull);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaNull { }\n}\n","import {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaNumber {\n  number(this:Itsa):Itsa {\n    this.predicates.push({ id: 'number' });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaNumber, {\n  id: 'number',\n  validate: (context: ItsaValidateContext) => {\n    const {val, type, result} = context;\n    if (type !== 'number') return result.registerError(`Expected number but type is ${type}.`, val);\n    if (isNaN(val)) return result.registerError(`Expected number but found NaN.`, val);\n    if (!isFinite(val)) return result.registerError(`Expected number but found infinity.`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaNumber { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\nimport {ItsaOrPrimative, primitiveToItsa} from \"./helpers\";\n\ninterface ItsaObjectExample {\n  [key: string]:Itsa;\n}\n\ninterface ItsaObjectExampleWithPrimitives {\n  [key: string]:ItsaOrPrimative;\n}\n\ninterface ItsaObjectConfig {\n  extras?: boolean;\n  key?: Itsa;\n  value?: Itsa;\n}\n\nexport interface ItsaObjectSettings {\n  example?: ItsaObjectExample;\n  config: ItsaObjectConfig;\n}\n\nexport class ItsaObject {\n  object(this:Itsa, example?:ItsaObjectExampleWithPrimitives, config:ItsaObjectConfig = {}):Itsa{\n    let convertedExample = null;\n    if (example) {\n      convertedExample = {};\n      for (const key in example) {\n        convertedExample[key] = primitiveToItsa(example[key]);\n      }\n    }\n    if (config.key) {\n      config.key = primitiveToItsa(config.key);\n    }\n    if (config.value) {\n      config.value = primitiveToItsa(config.value);\n    }\n    const settings:ItsaObjectSettings = { example:convertedExample as ItsaObjectExample, config };\n    this.predicates.push({ id: 'object', settings });\n    return this as any as Itsa;\n  }\n  addProperty(this:Itsa, key:string, schema:ItsaOrPrimative):Itsa {\n    for (let i = this.predicates.length - 1; i >= 0; i--) {\n      const pred = this.predicates[i];\n      if (pred.id !== 'object') continue;\n      if (!pred.settings) pred.settings = {};\n      if (!pred.settings.example) pred.settings.example = {};\n      if (!pred.settings.config) pred.settings.config = {};\n      pred.settings.example[key] = primitiveToItsa(schema);\n      break;\n    }\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaObject, {\n  id: 'object',\n  builder(settings: ItsaObjectSettings) {\n    const obj = {};\n    const example = settings.example as any;\n    if (example) {\n      const keys = Object.keys(example);\n      for (const key of keys) {\n        const schemaForKey = example[key];\n        obj[key] = schemaForKey.build();\n      }\n    }\n    return obj;\n  },\n  validate: (context:ItsaValidateContext, settings:ItsaObjectSettings) => {\n    const { val, parent, validation, result, type } = context;\n    const { example, config } = settings;\n    const extras = config.extras ?? false;\n\n    // Validate object\n    if (!val) return result.registerError(`Expected object but value is ${val}.`, val);\n    if (type !== \"object\") return result.registerError(`Expected object but type is ${type}.`, val);\n    if (val instanceof RegExp) return result.registerError(`Expected object but type is regex.`, val);\n    if (val instanceof Date) return result.registerError(`Expected object but type is date.`, val);\n    if (Array.isArray(val)) return result.registerError(`Expected object but type is array.`, val);\n\n    const objectKeys = Object.keys(val);\n\n    if (example) {\n      // Validate according to example\n      const exampleKeys = Object.keys(example);\n      for (const key of exampleKeys) {\n        // For root object, we might skip missing fields\n        if (!parent && validation.partial && !objectKeys.includes(key)) {\n          continue;\n        }\n\n        const subSchema = example[key];\n        const subResult = subSchema._validate({\n          key,\n          parent:val,\n          val: val[key],\n          exists: key in val,\n          settings: validation,\n          path: [...context.path, key],\n        });\n        result.registerResult(subResult);\n      }\n\n      // Error for extra properties?\n      if (!extras) {\n        const extraKeys = objectKeys.filter(k => !exampleKeys.includes(k));\n        if (extraKeys.length) {\n          result.registerError(`Extra unknown properties: ${extraKeys.join(', ')}`, val);\n        }\n      }\n    }\n\n    if (config.key) {\n      for (const key of objectKeys) {\n        const subResult = config.key._validate({\n          key,\n          parent: val,\n          val: key,\n          exists: true,\n          settings: validation,\n          path: [...context.path, key],\n        });\n        result.registerResult(subResult);\n      }\n    }\n\n    if (config.value) {\n      for (const key of objectKeys) {\n        const subVal = val[key];\n        const subResult = config.value._validate({\n          key,\n          parent: val,\n          val: subVal,\n          exists: true,\n          settings: validation,\n          path: [...context.path, key],\n        });\n        result.registerResult(subResult);\n      }\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaObject { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\nconst rxObjectId = /^[0-9a-f]{24}$/i;\n\nexport class ItsaObjectId {\n  objectid(this:Itsa):Itsa{\n    this.predicates.push({ id: 'objectid', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaObjectId, {\n  id: 'objectid',\n  validate: (context:ItsaValidateContext, settings?:any) => {\n    const { val, result, type } = context;\n    if (!val) return result.registerError('ObjectId is required', val);\n    if (type !== 'string') return result.registerError('ObjectId must be a string', val);\n    if (val.length !== 24) return result.registerError('ObjectId must have 24 characters', val);\n    if (!rxObjectId.test(val)) return result.registerError('ObjectId may only contain 0-9, a-z', val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaObjectId { }\n}\n","\nimport { Itsa, ItsaOrPrimative, ItsaValidateContext } from \"./itsa\";\nimport { primitiveToItsa} from \"./helpers\";\n\ninterface ItsaOptionalSettings {\n  allowedSchema:Itsa;\n}\n\nexport class ItsaOptional {\n  optional(this:Itsa, allowedSchema:ItsaOrPrimative):Itsa{\n    const settings:ItsaOptionalSettings = { allowedSchema: primitiveToItsa(allowedSchema) };\n    this.predicates.push({ id: 'optional', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaOptional, {\n  id: 'optional',\n  validate: (context:ItsaValidateContext, settings:ItsaOptionalSettings) => {\n    const { key, parent, exists, validation, path, val, result } = context;\n    if (val === null) return;\n    if (val === undefined) return;\n\n    const subResult = settings.allowedSchema._validate({\n      key,\n      parent,\n      val,\n      exists,\n      path,\n      settings: validation,\n    });\n    if (!subResult.ok) {\n      return result.addResult(subResult);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaOptional { }\n}\n","\nimport {Itsa, ItsaPredicate} from \"./itsa\";\n\ntype RawItsa = {predicates:ItsaPredicate[]};\n\nconst convert = (el:any) => {\n  const proto = Object.prototype.toString.call(el);\n  const isObject = `[object Object]` === proto;\n  const isArray = `[object Array]` === proto;\n  if (!isObject && !isArray) {\n    return el;\n  }\n\n  // replace sub-schemas: depth first\n  for (const key in el) {\n    el[key] = convert(el[key]);\n  }\n\n  if (isObject && el.predicates) {\n    const i = new Itsa();\n    i.predicates = el.predicates;\n    return i;\n  }\n\n  return el;\n}\n\nexport class ItsaSerialize {\n  load(this:Itsa, raw:RawItsa):Itsa{\n    this.predicates = convert(raw).predicates;\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaSerialize);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaSerialize { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaString {\n  string(this:Itsa):Itsa{\n    this.predicates.push({ id: 'string', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaString, {\n  id: 'string',\n  validate: (context:ItsaValidateContext) => {\n    const { type, result, val } = context;\n    if (type !== 'string') return result.registerError(`Expected string`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaString { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaToIntSettings {\n  radix?:number;\n}\n\nexport class ItsaTo {\n  toDate(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toDate', settings:null });\n    return this as any as Itsa;\n  }\n  toFloat(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toFloat', settings:null });\n    return this as any as Itsa;\n  }\n  toInt(this:Itsa, radix?:number):Itsa{\n    const settings:ItsaToIntSettings = { radix };\n    this.predicates.push({ id: 'toInt', settings });\n    return this as any as Itsa;\n  }\n  toLowerCase(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toLowerCase' });\n    return this as any as Itsa;\n  }\n  toUpperCase(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toUpperCase' });\n    return this as any as Itsa;\n  }\n  toNow(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toNow' });\n    return this as any as Itsa;\n  }\n  toString(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toString' });\n    return this as any as Itsa;\n  }\n  toTrimmed(this:Itsa):Itsa{\n    this.predicates.push({ id: 'toTrimmed' });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(\n  ItsaTo,\n  {\n    id: 'toDate',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal, result } = context;\n      const date = new Date(val);\n      if (!isFinite(date.getTime())) return result.registerError(`Date conversion failed`, val);\n      setVal(date);\n    }\n  },\n  {\n    id: 'toFloat',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal, result } = context;\n      const newFloat = parseFloat(val);\n      if (isNaN(newFloat)) return result.registerError(`Float conversion failed`, val);\n      setVal(newFloat);\n    }\n  },\n  {\n    id: 'toInt',\n    validate: (context:ItsaValidateContext, settings:ItsaToIntSettings) => {\n      const { val, setVal, result } = context;\n      const { radix } = settings;\n      const newInt = parseInt(val, radix ?? 10);\n      if (isNaN(newInt)) return result.registerError(`Int conversion failed`, val);\n      setVal(newInt);\n    }\n  },\n  {\n    id: 'toLowerCase',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal } = context;\n      setVal(String(val).toLowerCase());\n    }\n  },\n  {\n    id: 'toUpperCase',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal } = context;\n      setVal(String(val).toUpperCase());\n    }\n  },\n  {\n    id: 'toNow',\n    validate: (context:ItsaValidateContext) => {\n      const { setVal } = context;\n      setVal(new Date());\n    }\n  },\n  {\n    id: 'toString',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal } = context;\n      setVal(String(val));\n    }\n  },\n  {\n    id: 'toTrimmed',\n    validate: (context:ItsaValidateContext) => {\n      const { val, setVal } = context;\n      setVal(String(val).trim());\n    }\n  },\n);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaTo { }\n}\n","\nimport { Itsa } from './itsa';\nimport { ItsaObjectSettings } from './object';\n\nclass ItsaTouch {\n  touch<X>(this:Itsa, obj:X, toucher?:(string, X) => void):X {\n    const objectPredicates = this.predicates.filter(p => p.id === 'object');\n    if (!objectPredicates.length) throw new Error(`This is not an object schema.`);\n    if (!obj) return obj;\n    for (const predicate of objectPredicates) {\n      const settings = predicate.settings as ItsaObjectSettings;\n      const example = settings.example as any;\n      if (!example) throw new Error(`A schema example is required.`);\n      const keys = Object.keys(example);\n      for (const key of keys) {\n        if (!(key in obj)) {\n          if (toucher) {\n            toucher(key, obj);\n          }else{\n            obj[key] = undefined;\n          }\n        }\n      }\n    }\n    return obj;\n  }\n}\n\nItsa.extend(ItsaTouch);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaTouch { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\nexport class ItsaTruthy {\n  truthy(this:Itsa):Itsa{\n    this.predicates.push({ id: 'truthy', settings:null });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaTruthy, {\n  id: 'truthy',\n  validate: (context:ItsaValidateContext) => {\n    const { val, result } = context;\n    if (!val) return result.registerError(`Expected truthy value.`, val);\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaTruthy { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaTypeOfSettings {\n  type: string;\n}\n\nexport class ItsaTypeOf {\n  typeof(this:Itsa, type:string):Itsa{\n    const settings: ItsaTypeOfSettings = { type };\n    this.predicates.push({ id: 'typeof', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaTypeOf, {\n  id: 'typeof',\n  validate: (context:ItsaValidateContext, settings: ItsaTypeOfSettings) => {\n    const { val, result } = context;\n    const { type } = settings;\n    const actualType = typeof val;\n    if (type !== actualType) {\n      result.registerError(`Expected ${type}`, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaTypeOf { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaUniqueSettings {\n  getter?: Function;\n}\n\nexport class ItsaUnique {\n  unique(this:Itsa, getter?:Function):Itsa{\n    const settings: ItsaUniqueSettings = { getter };\n    this.predicates.push({ id: 'unique', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaUnique, {\n  id: 'unique',\n  validate: (context:ItsaValidateContext, settings: ItsaUniqueSettings) => {\n    const { val, result } = context;\n    const { getter } = settings;\n    const set = new Set();\n    for (const key in val) {\n      let subVal = val[key];\n      if (getter) subVal = getter(subVal);\n      if (set.has(subVal)) {\n        return result.registerError(`${subVal} occurred multiple times`, val);\n      }\n      set.add(subVal);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaUnique { }\n}\n","\nimport {\n  Itsa,\n  ItsaValidator,\n  ItsaValidateContext,\n  ItsaInternalValidationSettings,\n  ItsaValidationResult,\n  ItsaValidationSettings,\n  ItsaValidationResultBuilder\n} from './itsa';\n\nclass ItsaValidation {\n  _validate(this:Itsa, settings:ItsaInternalValidationSettings):ItsaValidationResultBuilder {\n    const { key } = settings;\n    const result = new ItsaValidationResultBuilder(settings.settings.exhaustive, key, settings.path, settings.settings.hint);\n    result.value = settings.val;\n    try {\n      const setVal = (newVal:any) => {\n        if (settings.parent) {\n          settings.parent[settings.key] = newVal;\n          settings.val = newVal;\n        }else{\n          result.value = newVal;\n        }\n      };\n      for (const predicate of this.predicates) {\n        const validator:ItsaValidator = Itsa.validators[predicate.id];\n\n        /* istanbul ignore next */\n        if (!validator) throw new Error(`Validator not found: ${predicate.id}`);\n\n        const context:ItsaValidateContext = {\n          setVal,\n          result: result.withMessageFormat(predicate.settings?._message),\n          val: settings.val,\n          key: settings.key,\n          parent: settings.parent,\n          exists: settings.exists,\n          type: typeof settings.val,\n          validation: settings.settings,\n          path: settings.path,\n        };\n        validator.validate(context, predicate.settings);\n        if (!result.ok) return result;\n      }\n    }catch (e){\n      /* istanbul ignore next */\n      if (e !== 'STOP_ON_FIRST_ERROR') throw e;\n    }\n    return result;\n  }\n\n  validate(this:Itsa, val: any, settings:ItsaValidationSettings = {}):ItsaValidationResult {\n    return this._validate({\n      val,\n      settings,\n      key:null,\n      parent:null,\n      exists: true,\n      path: [],\n    });\n  }\n\n  validOrThrow(this:Itsa, val:any, settings?:ItsaValidationSettings) {\n    this.validate(val, settings).okOrThrow();\n  }\n}\n\nItsa.extend(ItsaValidation);\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaValidation { }\n}\n","\nimport {Itsa, ItsaValidateContext} from \"./itsa\";\n\ninterface ItsaVerifySettings {\n  verifier: Function;\n}\n\nexport class ItsaVerify {\n  verify(this:Itsa, verifier:Function):Itsa{\n    const settings: ItsaVerifySettings = { verifier };\n    this.predicates.push({ id: 'verify', settings });\n    return this as any as Itsa;\n  }\n}\n\nItsa.extend(ItsaVerify, {\n  id: 'verify',\n  validate: (context:ItsaValidateContext, settings: ItsaVerifySettings) => {\n    const { val, result } = context;\n    const { verifier } = settings;\n    try {\n      const response = verifier(val);\n      if (typeof response === 'boolean') {\n        if (response === false) {\n          result.registerError(`Value is invalid`, val);\n        }\n        return;\n      }\n      if (typeof response === 'string') {\n        return result.registerError(response, val);\n      }\n    }catch(e){\n      if (e === 'STOP_ON_FIRST_ERROR') throw e;\n      return result.registerError(e, val);\n    }\n  }\n});\n\ndeclare module './itsa' {\n  interface Itsa extends ItsaVerify { }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(589);\n"],"sourceRoot":""}